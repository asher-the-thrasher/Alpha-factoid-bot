[
  {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#1",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 1,
   "Command": "ad",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Self-advertisement or advertisement for others is only  allowed on this server in <#474040782995587082>. Please read the rules in the <#477179447485661186> channel.",
   "code": "#1\n@client.command(aliases=()) \nasync def ad(ctx):\n  field3 = content_fields[1][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "#1\n@client.command(aliases=()) \nasync def ad(ctx):\n  field3 = content_fields[1][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#2\n@client.command(aliases=()) \nasync def admin(ctx):\n  field3 = content_fields[2][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#3\n@client.command(aliases=()) \nasync def adminshares(ctx):\n  field3 = content_fields[3][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#4\n@client.command(aliases=()) \nasync def aero(ctx):\n  field3 = content_fields[4][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#5\n@client.command(aliases=()) \nasync def amfdrivers(ctx):\n  field3 = content_fields[5][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#6\n@client.command(aliases=(\"analyzer\", \"status\")) \nasync def analyze(ctx):\n  field3 = content_fields[6][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#7\n@client.command(aliases=(\"av\", \"norton\")) \nasync def antivirus(ctx):\n  field3 = content_fields[7][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#8\n@client.command(aliases=()) \nasync def asio(ctx):\n  field3 = content_fields[8][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#9\n@client.command(aliases=(\"ar\", \"aspect\", \"blackbars\")) \nasync def aspectratio(ctx):\n  field3 = content_fields[9][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#10\n@client.command(aliases=(\"am\", \"monitoring\")) \nasync def audiomonitoring(ctx):\n  field3 = content_fields[10][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#11\n@client.command(aliases=(\"auto\")) \nasync def autoconfig(ctx):\n  field3 = content_fields[11][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#12\n@client.command(aliases=(\"avg\")) \nasync def avast(ctx):\n  field3 = content_fields[12][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#13\n@client.command(aliases=()) \nasync def bestsettings(ctx):\n  field3 = content_fields[13][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#14\n@client.command(aliases=()) \nasync def bigsur(ctx):\n  field3 = content_fields[14][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#15\n@client.command(aliases=(\"black\", \"bs\")) \nasync def blackscreen(ctx):\n  field3 = content_fields[15][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#16\n@client.command(aliases=()) \nasync def blame(ctx):\n  field3 = content_fields[16][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#17\n@client.command(aliases=(\"bt\")) \nasync def bluetooth(ctx):\n  field3 = content_fields[17][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#18\n@client.command(aliases=()) \nasync def botrepo(ctx):\n  field3 = content_fields[18][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#19\n@client.command(aliases=(\"browser\", \"clrbrowser\", \"mpbrowser\", \"linuxbrowser\")) \nasync def browsersource(ctx):\n  field3 = content_fields[19][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#20\n@client.command(aliases=()) \nasync def buffering(ctx):\n  field3 = content_fields[20][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#21\n@client.command(aliases=()) \nasync def bye(ctx):\n  field3 = content_fields[21][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#22\n@client.command(aliases=(\"browsercache\")) \nasync def cache(ctx):\n  field3 = content_fields[22][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#23\n@client.command(aliases=(\"webcam\")) \nasync def cam(ctx):\n  field3 = content_fields[23][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#24\n@client.command(aliases=(\"bitdefender\")) \nasync def camav(ctx):\n  field3 = content_fields[24][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#25\n@client.command(aliases=(\"cameraflip\")) \nasync def camflip(ctx):\n  field3 = content_fields[25][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#26\n@client.command(aliases=(\"capturecard\", \"capturecardlist\")) \nasync def capturecards(ctx):\n  field3 = content_fields[26][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#27\n@client.command(aliases=()) \nasync def catalina(ctx):\n  field3 = content_fields[27][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#28\n@client.command(aliases=()) \nasync def cert(ctx):\n  field3 = content_fields[28][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#29\n@client.command(aliases=(\"releases\", \"versions\")) \nasync def changelog(ctx):\n  field3 = content_fields[29][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#30\n@client.command(aliases=(\"chatdock\")) \nasync def chatdocks(ctx):\n  field3 = content_fields[30][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#31\n@client.command(aliases=()) \nasync def chrome(ctx):\n  field3 = content_fields[31][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#32\n@client.command(aliases=(\"chromebook\")) \nasync def chromeos(ctx):\n  field3 = content_fields[32][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "copied code": "#1\n@client.command(aliases=()) \nasync def ad(ctx):\n  field3 = content_fields[1][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#2\n@client.command(aliases=()) \nasync def admin(ctx):\n  field3 = content_fields[2][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#3\n@client.command(aliases=()) \nasync def adminshares(ctx):\n  field3 = content_fields[3][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#4\n@client.command(aliases=()) \nasync def aero(ctx):\n  field3 = content_fields[4][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#5\n@client.command(aliases=()) \nasync def amfdrivers(ctx):\n  field3 = content_fields[5][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#6\n@client.command(aliases=(\"analyzer\", \"status\")) \nasync def analyze(ctx):\n  field3 = content_fields[6][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#7\n@client.command(aliases=(\"av\", \"norton\")) \nasync def antivirus(ctx):\n  field3 = content_fields[7][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#8\n@client.command(aliases=()) \nasync def asio(ctx):\n  field3 = content_fields[8][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#9\n@client.command(aliases=(\"ar\", \"aspect\", \"blackbars\")) \nasync def aspectratio(ctx):\n  field3 = content_fields[9][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#10\n@client.command(aliases=(\"am\", \"monitoring\")) \nasync def audiomonitoring(ctx):\n  field3 = content_fields[10][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#11\n@client.command(aliases=(\"auto\")) \nasync def autoconfig(ctx):\n  field3 = content_fields[11][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#12\n@client.command(aliases=(\"avg\")) \nasync def avast(ctx):\n  field3 = content_fields[12][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#13\n@client.command(aliases=()) \nasync def bestsettings(ctx):\n  field3 = content_fields[13][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#14\n@client.command(aliases=()) \nasync def bigsur(ctx):\n  field3 = content_fields[14][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#15\n@client.command(aliases=(\"black\", \"bs\")) \nasync def blackscreen(ctx):\n  field3 = content_fields[15][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#16\n@client.command(aliases=()) \nasync def blame(ctx):\n  field3 = content_fields[16][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#17\n@client.command(aliases=(\"bt\")) \nasync def bluetooth(ctx):\n  field3 = content_fields[17][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#18\n@client.command(aliases=()) \nasync def botrepo(ctx):\n  field3 = content_fields[18][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#19\n@client.command(aliases=(\"browser\", \"clrbrowser\", \"mpbrowser\", \"linuxbrowser\")) \nasync def browsersource(ctx):\n  field3 = content_fields[19][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#20\n@client.command(aliases=()) \nasync def buffering(ctx):\n  field3 = content_fields[20][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#21\n@client.command(aliases=()) \nasync def bye(ctx):\n  field3 = content_fields[21][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#22\n@client.command(aliases=(\"browsercache\")) \nasync def cache(ctx):\n  field3 = content_fields[22][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#23\n@client.command(aliases=(\"webcam\")) \nasync def cam(ctx):\n  field3 = content_fields[23][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#24\n@client.command(aliases=(\"bitdefender\")) \nasync def camav(ctx):\n  field3 = content_fields[24][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#25\n@client.command(aliases=(\"cameraflip\")) \nasync def camflip(ctx):\n  field3 = content_fields[25][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#26\n@client.command(aliases=(\"capturecard\", \"capturecardlist\")) \nasync def capturecards(ctx):\n  field3 = content_fields[26][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#27\n@client.command(aliases=()) \nasync def catalina(ctx):\n  field3 = content_fields[27][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#28\n@client.command(aliases=()) \nasync def cert(ctx):\n  field3 = content_fields[28][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#29\n@client.command(aliases=(\"releases\", \"versions\")) \nasync def changelog(ctx):\n  field3 = content_fields[29][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#30\n@client.command(aliases=(\"chatdock\")) \nasync def chatdocks(ctx):\n  field3 = content_fields[30][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#31\n@client.command(aliases=()) \nasync def chrome(ctx):\n  field3 = content_fields[31][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#32\n@client.command(aliases=(\"chromebook\")) \nasync def chromeos(ctx):\n  field3 = content_fields[32][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "FIELD17": ""
 },
 {
   "#": "#2",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 2,
   "Command": "admin",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Certain games or applications will require OBS Studio to be run with elevated privileges (Administrator) in order to be captured. Running as administrator may also improve OBS performance when gaming.\nTo run as administrator, close OBS Studio, then simply right click the OBS Studio shortcut and select Run as administrator.",
   "code": "#2\n@client.command(aliases=()) \nasync def admin(ctx):\n  field3 = content_fields[2][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#3",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 3,
   "Command": "adminshares",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "In order to access network shares when OBS is run as administrator, additional configuration of Windows is required:\nhttps://support.microsoft.com/kb/3035277\nNOTE: This may lower the security of your system, so please make sure you understand the changes before making them.",
   "code": "#3\n@client.command(aliases=()) \nasync def adminshares(ctx):\n  field3 = content_fields[3][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#4",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 4,
   "Command": "aero",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Windows Aero is a system setting on Windows 7 that enables enhanced graphical effects and allows Window Capture in OBS to function better. Disabling Aero can also improve Display Capture performance. Aero does not need to be enabled or disabled for capture to work on Windows 8 or newer.\nHow to enable or disable Aero in Windows 7",
   "code": "#4\n@client.command(aliases=()) \nasync def aero(ctx):\n  field3 = content_fields[4][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#5",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 5,
   "Command": "amfdrivers",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Due to an increase in crash reports usually from users with old or even ancient (>1 year out of date) drivers, the decision was made to no longer load the plugin on those systems. This also reduced the amount of code necessary to maintain as backwards compatibility is only necessary for the UI instead of both the UI and the encoder. The recommended version is 19.9.2 or newer.",
   "code": "#5\n@client.command(aliases=()) \nasync def amfdrivers(ctx):\n  field3 = content_fields[5][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#6",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 6,
   "Command": "analyze",
   "Aliases": "analyzer, status",
   "\", \"": "\", \"",
   "adding \", \"": "analyzer\", \"status",
   "full function": "\"analyzer\", \"status\"",
   "alias for code": "\"analyzer\", \"status\"",
   "Text": "Twitch Stream Analyzer - https://r-1.ch/analyzer/",
   "code": "#6\n@client.command(aliases=(\"analyzer\", \"status\")) \nasync def analyze(ctx):\n  field3 = content_fields[6][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#7",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 7,
   "Command": "antivirus",
   "Aliases": "av, norton",
   "\", \"": "\", \"",
   "adding \", \"": "av\", \"norton",
   "full function": "\"av\", \"norton\"",
   "alias for code": "\"av\", \"norton\"",
   "Text": "Problems with disappearing files, the installation of OBS, or the installation of plugins? Some anti-virus programs are known to flag new files as potentially dangerous, even when the files are completely safe. The heuristic scanning doesn't know that and can quarantine those files anyway. Use less paranoid anti-virus software, or whitelist/exclude the OBS folder from scanning.",
   "code": "#7\n@client.command(aliases=(\"av\", \"norton\")) \nasync def antivirus(ctx):\n  field3 = content_fields[7][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#8",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 8,
   "Command": "asio",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "An ASIO input plugin is available for OBS: https://github.com/Andersama/obs-asio",
   "code": "#8\n@client.command(aliases=()) \nasync def asio(ctx):\n  field3 = content_fields[8][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#9",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 9,
   "Command": "aspectratio",
   "Aliases": "ar, aspect, blackbars",
   "\", \"": "\", \"",
   "adding \", \"": "ar\", \"aspect\", \"blackbars",
   "full function": "\"ar\", \"aspect\", \"blackbars\"",
   "alias for code": "\"ar\", \"aspect\", \"blackbars\"",
   "Text": "Black bars on your stream or recording? Read How to select the correct Aspect Ratio for your Recording/Stream and How to do a 16:9 stream with any size of Video-input.",
   "code": "#9\n@client.command(aliases=(\"ar\", \"aspect\", \"blackbars\")) \nasync def aspectratio(ctx):\n  field3 = content_fields[9][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#10",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 10,
   "Command": "audiomonitoring",
   "Aliases": "am, monitoring",
   "\", \"": "\", \"",
   "adding \", \"": "am\", \"monitoring",
   "full function": "\"am\", \"monitoring\"",
   "alias for code": "\"am\", \"monitoring\"",
   "Text": "To use the Audio Monitoring feature, click Edit -> Advanced Audio Properties and set Audio Monitoring to either Monitor Only, or Monitor and Output. Monitor Only will not output that device's audio to your stream/recording.\nAudio for that device will be played out of your system default device, unless otherwise specified in Settings -> Audio -> Advanced.",
   "code": "#10\n@client.command(aliases=(\"am\", \"monitoring\")) \nasync def audiomonitoring(ctx):\n  field3 = content_fields[10][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#11",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 11,
   "Command": "autoconfig",
   "Aliases": "auto",
   "\", \"": "\", \"",
   "adding \", \"": "auto",
   "full function": "\"auto\"",
   "alias for code": "\"auto\"",
   "Text": "Please run the OBS auto-configuration tool. To use the auto-config, click on the Tools menu in OBS, select Auto-Configuration Wizard, and then just follow the on-screen directions. You can use this tool to get a set baseline settings for your hardware, and adjust as necessary from there.",
   "code": "#11\n@client.command(aliases=(\"auto\")) \nasync def autoconfig(ctx):\n  field3 = content_fields[11][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#12",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 12,
   "Command": "avast",
   "Aliases": "avg",
   "\", \"": "\", \"",
   "adding \", \"": "avg",
   "full function": "\"avg\"",
   "alias for code": "\"avg\"",
   "Text": "The Avast/AVG antivirus' Game Mode is known to cause issues with OBS. Having it enabled will essentially render OBS inoperable. You can either disable Game Mode in the options, or uninstall Avast/AVG completely.",
   "code": "#12\n@client.command(aliases=(\"avg\")) \nasync def avast(ctx):\n  field3 = content_fields[12][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#13",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 13,
   "Command": "bestsettings",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "There are no \"best settings.\" Please understand that every setup, for every use case, will be very different. Any guides or videos that claim otherwise are misinforming. Your best option is to start with a base and adjust as necessary. Test, test, and test again. We are happy to offer suggestions for any issues you may be having, but we will not give you a list of settings.",
   "code": "#13\n@client.command(aliases=()) \nasync def bestsettings(ctx):\n  field3 = content_fields[13][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#14",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 14,
   "Command": "bigsur",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "If you are having issues with OBS Studio on macOS Big Sur, make sure you have updated to the latest version, as many of the issues were resolved in v26.1.2.\nSelect Help -> Check For Updates in OBS, or the newest version can be manually downloaded here: https://obsproject.com/download",
   "code": "#14\n@client.command(aliases=()) \nasync def bigsur(ctx):\n  field3 = content_fields[14][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#15",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 15,
   "Command": "blackscreen",
   "Aliases": "black, bs",
   "\", \"": "\", \"",
   "adding \", \"": "black\", \"bs",
   "full function": "\"black\", \"bs\"",
   "alias for code": "\"black\", \"bs\"",
   "Text": "If you are trying to stream or record with OBS and are getting a black screen, make sure you have added the appropriate source to capture what you are trying to show. Window, Game, and Display capture are the three most common capture sources. If you have already added a capture source, and OBS is still black, please grab your current log and link it here.\nHelp -> Log Files -> Upload Current Log",
   "code": "#15\n@client.command(aliases=(\"black\", \"bs\")) \nasync def blackscreen(ctx):\n  field3 = content_fields[15][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#16",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 16,
   "Command": "blame",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "It's Lava's fault.",
   "code": "#16\n@client.command(aliases=()) \nasync def blame(ctx):\n  field3 = content_fields[16][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#17",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 17,
   "Command": "bluetooth",
   "Aliases": "bt",
   "\", \"": "\", \"",
   "adding \", \"": "bt",
   "full function": "\"bt\"",
   "alias for code": "\"bt\"",
   "Text": "If your audio is muting when you launch OBS, and you're using a Bluetooth headset, it's caused by the underlying design of Bluetooth. To fix this, you can either switch to a wired headset, don't use the Bluetooth headset's mic, or set your sound to go through the HFP device for your headset.\nNote: HFP offers lower sound quality.",
   "code": "#17\n@client.command(aliases=(\"bt\")) \nasync def bluetooth(ctx):\n  field3 = content_fields[17][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#18",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 18,
   "Command": "botrepo",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "You wouldn't want to see my code.",
   "code": "#18\n@client.command(aliases=()) \nasync def botrepo(ctx):\n  field3 = content_fields[18][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#19",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 19,
   "Command": "browsersource",
   "Aliases": "browser, clrbrowser, mpbrowser, linuxbrowser",
   "\", \"": "\", \"",
   "adding \", \"": "browser\", \"clrbrowser\", \"mpbrowser\", \"linuxbrowser",
   "full function": "\"browser\", \"clrbrowser\", \"mpbrowser\", \"linuxbrowser\"",
   "alias for code": "\"browser\", \"clrbrowser\", \"mpbrowser\", \"linuxbrowser\"",
   "Text": "The Browser Source plugin for Windows and macOS are bundled with the installers, go to http://obsproject.com/download/\nThe browser is included in the stable Ubuntu PPA with version 26.0.0",
   "code": "#19\n@client.command(aliases=(\"browser\", \"clrbrowser\", \"mpbrowser\", \"linuxbrowser\")) \nasync def browsersource(ctx):\n  field3 = content_fields[19][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#20",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 20,
   "Command": "buffering",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Is a stream buffering for you or some of your viewers? Read https://obsproject.com/wiki/Stream-Buffering-Issues",
   "code": "#20\n@client.command(aliases=()) \nasync def buffering(ctx):\n  field3 = content_fields[20][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#21",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 21,
   "Command": "bye",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Thank you, have a nice day, goodbye. o/",
   "code": "#21\n@client.command(aliases=()) \nasync def bye(ctx):\n  field3 = content_fields[21][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#22",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 22,
   "Command": "cache",
   "Aliases": "browsercache",
   "\", \"": "\", \"",
   "adding \", \"": "browsercache",
   "full function": "\"browsercache\"",
   "alias for code": "\"browsercache\"",
   "Text": "The OBS Browser cache can be found in the following locations:\nWindows: %appdata%\\obs-studio\\plugin_config\\obs-browser\nmacOS: ~/Library/Application Support/obs-studio/plugin_config/obs-browser\nLinux: ~/.config/obs-studio/plugin_config/obs-browser",
   "code": "#22\n@client.command(aliases=(\"browsercache\")) \nasync def cache(ctx):\n  field3 = content_fields[22][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#23",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 23,
   "Command": "cam",
   "Aliases": "webcam",
   "\", \"": "\", \"",
   "adding \", \"": "webcam",
   "full function": "\"webcam\"",
   "alias for code": "\"webcam\"",
   "Text": "Guides to getting the most out of your webcam:\nhttp://obsproject.com/forum/threads/1036/\nhttps://www.youtube.com/watch?v=6NY8wWo_VBs",
   "code": "#23\n@client.command(aliases=(\"webcam\")) \nasync def cam(ctx):\n  field3 = content_fields[23][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#24",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 24,
   "Command": "camav",
   "Aliases": "bitdefender",
   "\", \"": "\", \"",
   "adding \", \"": "bitdefender",
   "full function": "\"bitdefender\"",
   "alias for code": "\"bitdefender\"",
   "Text": "Many modern antivirus programs have added in and automatically enabled webcam protection features that block applications such as OBS from being able to access webcams and capture cards. Check that your antivirus program does not have a webcam/video device blocking feature, and if it does, you will need to add OBS as an exception.",
   "code": "#24\n@client.command(aliases=(\"bitdefender\")) \nasync def camav(ctx):\n  field3 = content_fields[24][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#25",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 25,
   "Command": "camflip",
   "Aliases": "cameraflip",
   "\", \"": "\", \"",
   "adding \", \"": "cameraflip",
   "full function": "\"cameraflip\"",
   "alias for code": "\"cameraflip\"",
   "Text": "The view you see in your application is flipped for you only. This is because most applications expect a webcam, and they want to mimic looking in a mirror for your own preview. Everyone else sees what you see in the OBS preview.",
   "code": "#25\n@client.command(aliases=(\"cameraflip\")) \nasync def camflip(ctx):\n  field3 = content_fields[25][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#26",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 26,
   "Command": "capturecards",
   "Aliases": "capturecard, capturecardlist",
   "\", \"": "\", \"",
   "adding \", \"": "capturecard\", \"capturecardlist",
   "full function": "\"capturecard\", \"capturecardlist\"",
   "alias for code": "\"capturecard\", \"capturecardlist\"",
   "Text": "Which capture card should I get for streaming or recording? And do I need one? (avoid USB 2.0 capture devices if at all possible) - http://www.helping-squad.com/which-capture-card-should-i-get-for-streaming-or-recording/",
   "code": "#26\n@client.command(aliases=(\"capturecard\", \"capturecardlist\")) \nasync def capturecards(ctx):\n  field3 = content_fields[26][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#27",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 27,
   "Command": "catalina",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "OBS 24.0.6 is out with many fixes, including Catalina support. Download it via the website https://obsproject.com/download",
   "code": "#27\n@client.command(aliases=()) \nasync def catalina(ctx):\n  field3 = content_fields[27][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#28",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 28,
   "Command": "cert",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Twitch is currently having an issue with a certificate provider, which is causing problems when fetching channel data and preventing people from connecting to their Twitch accounts. They are aware of the issue and are working on resolving it. In the meantime, you can still stream by disconnecting your Twitch account and entering your stream key from here: https://dashboard.twitch.tv/settings/channel",
   "code": "#28\n@client.command(aliases=()) \nasync def cert(ctx):\n  field3 = content_fields[28][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#29",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 29,
   "Command": "changelog",
   "Aliases": "releases, versions",
   "\", \"": "\", \"",
   "adding \", \"": "releases\", \"versions",
   "full function": "\"releases\", \"versions\"",
   "alias for code": "\"releases\", \"versions\"",
   "Text": "Previous versions of OBS Studio can be found here: https://github.com/obsproject/obs-studio/releases",
   "code": "#29\n@client.command(aliases=(\"releases\", \"versions\")) \nasync def changelog(ctx):\n  field3 = content_fields[29][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#30",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 30,
   "Command": "chatdocks",
   "Aliases": "chatdock",
   "\", \"": "\", \"",
   "adding \", \"": "chatdock",
   "full function": "\"chatdock\"",
   "alias for code": "\"chatdock\"",
   "Text": "To enable Chat docks for Twitch or Restream, you will need to connect your account via Settings -> Stream.\nIf you'd like to enable chat docks for other services, you can use View -> Docks -> Custom Browser Docks. This allows you to include any webpage in OBS.",
   "code": "#30\n@client.command(aliases=(\"chatdock\")) \nasync def chatdocks(ctx):\n  field3 = content_fields[30][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#31",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 31,
   "Command": "chrome",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "As part of OBS Studio 25, you can now Window Capture Google Chrome without disabling hardware acceleration.\nRequirements:\nWindows 10 Version 1903 or newer (open winver.exe to check)\nWindow Capture \"Capture Method\": \"Windows Graphics Capture\"\nFor older versions of Windows, do the following:\nOpen Chrome Settings.\nIn the Search settings box, type in hardware.\nEnsure that the slider next to the Use hardware acceleration when available option is turned off.\nClick Relaunch to restart Chrome.",
   "code": "#31\n@client.command(aliases=()) \nasync def chrome(ctx):\n  field3 = content_fields[31][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#32",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 32,
   "Command": "chromeos",
   "Aliases": "chromebook",
   "\", \"": "\", \"",
   "adding \", \"": "chromebook",
   "full function": "\"chromebook\"",
   "alias for code": "\"chromebook\"",
   "Text": "OBS will not be developed for ChromeOS. The operating system has too many limits in place that prevent OBS from being able to do what it needs to do, and more often than not, Chromebook hardware is too weak to render and encode live video. The Linux Beta for ChromeOS does not change this.",
   "code": "#32\n@client.command(aliases=(\"chromebook\")) \nasync def chromeos(ctx):\n  field3 = content_fields[32][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#33",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 33,
   "Command": "classic",
   "Aliases": "upgrade",
   "\", \"": "\", \"",
   "adding \", \"": "upgrade",
   "full function": "\"upgrade\"",
   "alias for code": "\"upgrade\"",
   "Text": "If you are still using OBS Classic, please note that this version is no longer supported. While we cannot and will not do anything to prevent you from using it, we cannot help with any issues that may come up. It is recommended that you update to OBS Studio. Further information on why you should update (and how): https://obsproject.com/forum/threads/55820/",
   "code": "#33\n@client.command(aliases=(\"upgrade\")) \nasync def classic(ctx):\n  field3 = content_fields[33][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "#33\n@client.command(aliases=(\"upgrade\")) \nasync def classic(ctx):\n  field3 = content_fields[33][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#34\n@client.command(aliases=(\"freshlog\", \"newlog\")) \nasync def cleanlog(ctx):\n  field3 = content_fields[34][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#35\n@client.command(aliases=()) \nasync def cleanprofile(ctx):\n  field3 = content_fields[35][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#36\n@client.command(aliases=(\"currentlog\", \"log\")) \nasync def clog(ctx):\n  field3 = content_fields[36][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#37\n@client.command(aliases=(\"clogi\", \"logi\")) \nasync def clogimage(ctx):\n  field3 = content_fields[37][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#38\n@client.command(aliases=(\"factoids\", \"list\")) \nasync def commands(ctx):\n  field3 = content_fields[38][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#39\n@client.command(aliases=(\"hook\", \"inject\")) \nasync def conflicts(ctx):\n  field3 = content_fields[39][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#40\n@client.command(aliases=(\"contrib\", \"contribute\", \"devgettingstarted\", \"building\")) \nasync def contributing(ctx):\n  field3 = content_fields[40][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#41\n@client.command(aliases=(\"convert\")) \nasync def converter(ctx):\n  field3 = content_fields[41][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#42\n@client.command(aliases=()) \nasync def coreaudio(ctx):\n  field3 = content_fields[42][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#43\n@client.command(aliases=(\"frameskipping\")) \nasync def cpu(ctx):\n  field3 = content_fields[43][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#44\n@client.command(aliases=(\"crashreport\")) \nasync def crashlog(ctx):\n  field3 = content_fields[44][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#45\n@client.command(aliases=()) \nasync def crop(ctx):\n  field3 = content_fields[45][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#46\n@client.command(aliases=(\"translate\")) \nasync def crowdin(ctx):\n  field3 = content_fields[46][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#47\n@client.command(aliases=()) \nasync def csgo(ctx):\n  field3 = content_fields[47][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#48\n@client.command(aliases=(\"cyberpunk\", \"2077\", \"cp2077\")) \nasync def cyberpunk2077(ctx):\n  field3 = content_fields[48][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#49\n@client.command(aliases=()) \nasync def delay(ctx):\n  field3 = content_fields[49][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#50\n@client.command(aliases=()) \nasync def dell(ctx):\n  field3 = content_fields[50][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#51\n@client.command(aliases=(\"dependencies\", \"qt\", \"cef\")) \nasync def deps(ctx):\n  field3 = content_fields[51][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#52\n@client.command(aliases=()) \nasync def destiny2(ctx):\n  field3 = content_fields[52][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#53\n@client.command(aliases=(\"diag\", \"obsdiag\")) \nasync def diagnostic(ctx):\n  field3 = content_fields[53][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#54\n@client.command(aliases=(\"dx\", \"dxfix\", \"dxgi\", \"dxruntimes\", \"dxsetup\")) \nasync def directx(ctx):\n  field3 = content_fields[54][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#55\n@client.command(aliases=()) \nasync def docki(ctx):\n  field3 = content_fields[55][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#56\n@client.command(aliases=(\"macdocki\")) \nasync def dockimac(ctx):\n  field3 = content_fields[56][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#57\n@client.command(aliases=()) \nasync def docks(ctx):\n  field3 = content_fields[57][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#58\n@client.command(aliases=()) \nasync def docs(ctx):\n  field3 = content_fields[58][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#59\n@client.command(aliases=(\"sponsor\")) \nasync def donate(ctx):\n  field3 = content_fields[59][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#60\n@client.command(aliases=(\"oldversions\", \"revert\")) \nasync def downgrade(ctx):\n  field3 = content_fields[60][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#61\n@client.command(aliases=(\"downloads\")) \nasync def download(ctx):\n  field3 = content_fields[61][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#62\n@client.command(aliases=()) \nasync def downtime(ctx):\n  field3 = content_fields[62][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#63\n@client.command(aliases=()) \nasync def dpi(ctx):\n  field3 = content_fields[63][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#64\n@client.command(aliases=()) \nasync def driveby(ctx):\n  field3 = content_fields[64][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "copied code": "#33\n@client.command(aliases=(\"upgrade\")) \nasync def classic(ctx):\n  field3 = content_fields[33][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#34\n@client.command(aliases=(\"freshlog\", \"newlog\")) \nasync def cleanlog(ctx):\n  field3 = content_fields[34][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#35\n@client.command(aliases=()) \nasync def cleanprofile(ctx):\n  field3 = content_fields[35][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#36\n@client.command(aliases=(\"currentlog\", \"log\")) \nasync def clog(ctx):\n  field3 = content_fields[36][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#37\n@client.command(aliases=(\"clogi\", \"logi\")) \nasync def clogimage(ctx):\n  field3 = content_fields[37][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#38\n@client.command(aliases=(\"factoids\", \"list\")) \nasync def commands(ctx):\n  field3 = content_fields[38][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#39\n@client.command(aliases=(\"hook\", \"inject\")) \nasync def conflicts(ctx):\n  field3 = content_fields[39][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#40\n@client.command(aliases=(\"contrib\", \"contribute\", \"devgettingstarted\", \"building\")) \nasync def contributing(ctx):\n  field3 = content_fields[40][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#41\n@client.command(aliases=(\"convert\")) \nasync def converter(ctx):\n  field3 = content_fields[41][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#42\n@client.command(aliases=()) \nasync def coreaudio(ctx):\n  field3 = content_fields[42][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#43\n@client.command(aliases=(\"frameskipping\")) \nasync def cpu(ctx):\n  field3 = content_fields[43][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#44\n@client.command(aliases=(\"crashreport\")) \nasync def crashlog(ctx):\n  field3 = content_fields[44][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#45\n@client.command(aliases=()) \nasync def crop(ctx):\n  field3 = content_fields[45][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#46\n@client.command(aliases=(\"translate\")) \nasync def crowdin(ctx):\n  field3 = content_fields[46][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#47\n@client.command(aliases=()) \nasync def csgo(ctx):\n  field3 = content_fields[47][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#48\n@client.command(aliases=(\"cyberpunk\", \"2077\", \"cp2077\")) \nasync def cyberpunk2077(ctx):\n  field3 = content_fields[48][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#49\n@client.command(aliases=()) \nasync def delay(ctx):\n  field3 = content_fields[49][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#50\n@client.command(aliases=()) \nasync def dell(ctx):\n  field3 = content_fields[50][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#51\n@client.command(aliases=(\"dependencies\", \"qt\", \"cef\")) \nasync def deps(ctx):\n  field3 = content_fields[51][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#52\n@client.command(aliases=()) \nasync def destiny2(ctx):\n  field3 = content_fields[52][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#53\n@client.command(aliases=(\"diag\", \"obsdiag\")) \nasync def diagnostic(ctx):\n  field3 = content_fields[53][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#54\n@client.command(aliases=(\"dx\", \"dxfix\", \"dxgi\", \"dxruntimes\", \"dxsetup\")) \nasync def directx(ctx):\n  field3 = content_fields[54][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#55\n@client.command(aliases=()) \nasync def docki(ctx):\n  field3 = content_fields[55][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#56\n@client.command(aliases=(\"macdocki\")) \nasync def dockimac(ctx):\n  field3 = content_fields[56][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#57\n@client.command(aliases=()) \nasync def docks(ctx):\n  field3 = content_fields[57][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#58\n@client.command(aliases=()) \nasync def docs(ctx):\n  field3 = content_fields[58][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#59\n@client.command(aliases=(\"sponsor\")) \nasync def donate(ctx):\n  field3 = content_fields[59][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#60\n@client.command(aliases=(\"oldversions\", \"revert\")) \nasync def downgrade(ctx):\n  field3 = content_fields[60][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#61\n@client.command(aliases=(\"downloads\")) \nasync def download(ctx):\n  field3 = content_fields[61][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#62\n@client.command(aliases=()) \nasync def downtime(ctx):\n  field3 = content_fields[62][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#63\n@client.command(aliases=()) \nasync def dpi(ctx):\n  field3 = content_fields[63][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#64\n@client.command(aliases=()) \nasync def driveby(ctx):\n  field3 = content_fields[64][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "FIELD17": ""
 },
 {
   "#": "#34",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 34,
   "Command": "cleanlog",
   "Aliases": "freshlog, newlog",
   "\", \"": "\", \"",
   "adding \", \"": "freshlog\", \"newlog",
   "full function": "\"freshlog\", \"newlog\"",
   "alias for code": "\"freshlog\", \"newlog\"",
   "Text": "A clean log file is required to help fix your issue. To make a clean log file, please follow these steps:\n1) Restart OBS\n2) Start your stream/recording for at least 30 seconds (or however long it takes for the issue to happen). Make sure you replicate any issues as best you can, which means having any games/apps open and captured, etc.\n3) Stop your stream/recording.\n4) Select Help > Log Files > Upload Current Log File. Copy the URL and paste it here.",
   "code": "#34\n@client.command(aliases=(\"freshlog\", \"newlog\")) \nasync def cleanlog(ctx):\n  field3 = content_fields[34][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#35",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 35,
   "Command": "cleanprofile",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Please post a link to a clean log with profiler information. To make a clean log with profiler information, follow these steps:\n1) Restart OBS.\n2) Start your stream/recording for ~30 seconds, and stop it again. Make sure you replicate any issues as best you can, which means having any games/apps open and captured, etc.\n3) Restart OBS again, and then select Help > Log Files > Upload Last Log File. Copy the URL and paste it here.\n(Note: If you do not see an obsproject.com URL, you will need to update OBS Studio to version 22+.)",
   "code": "#35\n@client.command(aliases=()) \nasync def cleanprofile(ctx):\n  field3 = content_fields[35][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#36",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 36,
   "Command": "clog",
   "Aliases": "currentlog, log",
   "\", \"": "\", \"",
   "adding \", \"": "currentlog\", \"log",
   "full function": "\"currentlog\", \"log\"",
   "alias for code": "\"currentlog\", \"log\"",
   "Text": "A current log file is required to help fix your issue. Please post a link to your current log file.\nIn OBS select Help > Log Files > Upload Current Log File.\nClick Copy URL and then paste the link here.",
   "code": "#36\n@client.command(aliases=(\"currentlog\", \"log\")) \nasync def clog(ctx):\n  field3 = content_fields[36][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#37",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 37,
   "Command": "clogimage",
   "Aliases": "clogi, logi",
   "\", \"": "\", \"",
   "adding \", \"": "clogi\", \"logi",
   "full function": "\"clogi\", \"logi\"",
   "alias for code": "\"clogi\", \"logi\"",
   "Text": "https://i.imgur.com/oL0BZjn.png",
   "code": "#37\n@client.command(aliases=(\"clogi\", \"logi\")) \nasync def clogimage(ctx):\n  field3 = content_fields[37][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#38",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 38,
   "Command": "commands",
   "Aliases": "factoids, list",
   "\", \"": "\", \"",
   "adding \", \"": "factoids\", \"list",
   "full function": "\"factoids\", \"list\"",
   "alias for code": "\"factoids\", \"list\"",
   "Text": "A list of commands can be found here: https://obsbot.rodney.io/",
   "code": "#38\n@client.command(aliases=(\"factoids\", \"list\")) \nasync def commands(ctx):\n  field3 = content_fields[38][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#39",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 39,
   "Command": "conflicts",
   "Aliases": "hook, inject",
   "\", \"": "\", \"",
   "adding \", \"": "hook\", \"inject",
   "full function": "\"hook\", \"inject\"",
   "alias for code": "\"hook\", \"inject\"",
   "Text": "Some third-party applications can conflict with OBS and cause issues, such as failing Game or Window capture, audio issues, and at worst crashes with OBS. For a full list, check here: https://obsproject.com/wiki/Known-Conflicts",
   "code": "#39\n@client.command(aliases=(\"hook\", \"inject\")) \nasync def conflicts(ctx):\n  field3 = content_fields[39][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#40",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 40,
   "Command": "contributing",
   "Aliases": "contrib, contribute, devgettingstarted, building",
   "\", \"": "\", \"",
   "adding \", \"": "contrib\", \"contribute\", \"devgettingstarted\", \"building",
   "full function": "\"contrib\", \"contribute\", \"devgettingstarted\", \"building\"",
   "alias for code": "\"contrib\", \"contribute\", \"devgettingstarted\", \"building\"",
   "Text": "To get started with OBS development, read this guide.",
   "code": "#40\n@client.command(aliases=(\"contrib\", \"contribute\", \"devgettingstarted\", \"building\")) \nasync def contributing(ctx):\n  field3 = content_fields[40][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#41",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 41,
   "Command": "converter",
   "Aliases": "convert",
   "\", \"": "\", \"",
   "adding \", \"": "convert",
   "full function": "\"convert\"",
   "alias for code": "\"convert\"",
   "Text": "A tool for converting OBS Classic scenes to OBS Studio is available at http://obsproject.com/forum/resources/430/",
   "code": "#41\n@client.command(aliases=(\"convert\")) \nasync def converter(ctx):\n  field3 = content_fields[41][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#42",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 42,
   "Command": "coreaudio",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "You can install Apple's CoreAudio codecs for better audio quality without bothering with iTunes or QuickTime. Follow the instructions at http://obsproject.com/forum/resources/220/",
   "code": "#42\n@client.command(aliases=()) \nasync def coreaudio(ctx):\n  field3 = content_fields[42][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#43",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 43,
   "Command": "cpu",
   "Aliases": "frameskipping",
   "\", \"": "\", \"",
   "adding \", \"": "frameskipping",
   "full function": "\"frameskipping\"",
   "alias for code": "\"frameskipping\"",
   "Text": "Having issues with high CPU usage, or getting a warning about \"Encoding overloaded!\"? Read https://obsproject.com/wiki/General-Performance-and-Encoding-Issues",
   "code": "#43\n@client.command(aliases=(\"frameskipping\")) \nasync def cpu(ctx):\n  field3 = content_fields[43][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#44",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 44,
   "Command": "crashlog",
   "Aliases": "crashreport",
   "\", \"": "\", \"",
   "adding \", \"": "crashreport",
   "full function": "\"crashreport\"",
   "alias for code": "\"crashreport\"",
   "Text": "A crash log is required to investigate the cause of your issue. Please upload the last crash log.\nIn OBS, click the Help menu\nSelect Crash Reports, and then Upload Last Crash Report\nCopy the URL, and paste it to the chat here.",
   "code": "#44\n@client.command(aliases=(\"crashreport\")) \nasync def crashlog(ctx):\n  field3 = content_fields[44][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#45",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 45,
   "Command": "crop",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "To crop sources in OBS Studio, first reset the source to its default size by clicking on it and pressing ctrl+r. Then hold the alt key and drag the red box around the source you wish to crop. The sides will turn green to indicate they are cropped. Note that the preview must be unlocked in order to do this.",
   "code": "#45\n@client.command(aliases=()) \nasync def crop(ctx):\n  field3 = content_fields[45][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#46",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 46,
   "Command": "crowdin",
   "Aliases": "translate",
   "\", \"": "\", \"",
   "adding \", \"": "translate",
   "full function": "\"translate\"",
   "alias for code": "\"translate\"",
   "Text": "To help with the translation of OBS see: http://crowdin.com/project/obs-studio",
   "code": "#46\n@client.command(aliases=(\"translate\")) \nasync def crowdin(ctx):\n  field3 = content_fields[46][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#47",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 47,
   "Command": "csgo",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Valve has implemented a Trusted mode which does not allow OBS to hook CS:GO using Game Capture. Read more in their announcement post. Additionally, they have no plans on allowing OBS in Trusted mode.\nWe recommend running the game in either windowed or borderless fullscreen and using a Window Capture source instead.\nAlternately, you can launch the game with -allow_third_party_software .",
   "code": "#47\n@client.command(aliases=()) \nasync def csgo(ctx):\n  field3 = content_fields[47][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#48",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 48,
   "Command": "cyberpunk2077",
   "Aliases": "cyberpunk, 2077, cp2077",
   "\", \"": "\", \"",
   "adding \", \"": "cyberpunk\", \"2077\", \"cp2077",
   "full function": "\"cyberpunk\", \"2077\", \"cp2077\"",
   "alias for code": "\"cyberpunk\", \"2077\", \"cp2077\"",
   "Text": "Cyberpunk 2077 is a very resource-intensive game. Additionally, it's also a DirectX 12 game, which means it can have issues with frame pacing.\nTo minimize the game's impact on OBS performance, limit the game to a stable frame rate (e.g. 60 FPS) and consider turning down your graphics quality settings.",
   "code": "#48\n@client.command(aliases=(\"cyberpunk\", \"2077\", \"cp2077\")) \nasync def cyberpunk2077(ctx):\n  field3 = content_fields[48][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#49",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 49,
   "Command": "delay",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "If you need to delay your audio sources, go to Edit -> Advanced Audio Properties and adjust the Sync Offset (ms) field. If you need to delay your video sources, add a Video Delay (Async) filter. For other sources (Window/Game/Display Capture), add a Render Delay filter and adjust as necessary.",
   "code": "#49\n@client.command(aliases=()) \nasync def delay(ctx):\n  field3 = content_fields[49][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#50",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 50,
   "Command": "dell",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "The Dell Backup and Recovery tool has a component that will cause issues with OBS, resulting in a crash. You can correct it by either uninstalling the tool completely if it is not being used, or by running this file as administrator on the system: https://obsproject.com/downloads/UnregisterDellBackup.cmd",
   "code": "#50\n@client.command(aliases=()) \nasync def dell(ctx):\n  field3 = content_fields[50][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#51",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 51,
   "Command": "deps",
   "Aliases": "dependencies, qt, cef",
   "\", \"": "\", \"",
   "adding \", \"": "dependencies\", \"qt\", \"cef",
   "full function": "\"dependencies\", \"qt\", \"cef\"",
   "alias for code": "\"dependencies\", \"qt\", \"cef\"",
   "Text": "Pre-built dependencies: VS2019\nCEF for browser source/panels: x86, x64\nQt 5.15.2: Windows, macOS",
   "code": "#51\n@client.command(aliases=(\"dependencies\", \"qt\", \"cef\")) \nasync def deps(ctx):\n  field3 = content_fields[51][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#52",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 52,
   "Command": "destiny2",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Bungie has opted to not allow OBS to hook Destiny 2 using Game Capture. See: https://www.bungie.net/en/Help/Article/46101\nYou will need to run the game in either windowed fullscreen or borderless windowed and use Window Capture instead.",
   "code": "#52\n@client.command(aliases=()) \nasync def destiny2(ctx):\n  field3 = content_fields[52][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#53",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 53,
   "Command": "diagnostic",
   "Aliases": "diag, obsdiag",
   "\", \"": "\", \"",
   "adding \", \"": "diag\", \"obsdiag",
   "full function": "\"diag\", \"obsdiag\"",
   "alias for code": "\"diag\", \"obsdiag\"",
   "Text": "Please run the OBS Diagnostics Tool to determine if there are any issues with system files that support OBS: https://obsproject.com/downloads/OBSDiag.zip\nOnce the tool has been run, screenshot the output (click the window and press the alt+printscreen keys on your keyboard) and post the screenshot (ctrl+v) here.",
   "code": "#53\n@client.command(aliases=(\"diag\", \"obsdiag\")) \nasync def diagnostic(ctx):\n  field3 = content_fields[53][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#54",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 54,
   "Command": "directx",
   "Aliases": "dx, dxfix, dxgi, dxruntimes, dxsetup",
   "\", \"": "\", \"",
   "adding \", \"": "dx\", \"dxfix\", \"dxgi\", \"dxruntimes\", \"dxsetup",
   "full function": "\"dx\", \"dxfix\", \"dxgi\", \"dxruntimes\", \"dxsetup\"",
   "alias for code": "\"dx\", \"dxfix\", \"dxgi\", \"dxruntimes\", \"dxsetup\"",
   "Text": "Missing DirectX components? Download the DirectX Web Installer from http://obsproject.com/go/dxwebsetup\nIf the web installer won't work, try the DirectX Dependency Fixer from http://obsproject.com/forum/resources/87/",
   "code": "#54\n@client.command(aliases=(\"dx\", \"dxfix\", \"dxgi\", \"dxruntimes\", \"dxsetup\")) \nasync def directx(ctx):\n  field3 = content_fields[54][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#55",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 55,
   "Command": "docki",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "https://i.imgur.com/YANZ4RG.png ",
   "code": "#55\n@client.command(aliases=()) \nasync def docki(ctx):\n  field3 = content_fields[55][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#56",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 56,
   "Command": "dockimac",
   "Aliases": "macdocki",
   "\", \"": "\", \"",
   "adding \", \"": "macdocki",
   "full function": "\"macdocki\"",
   "alias for code": "\"macdocki\"",
   "Text": "https://i.imgur.com/DbpZ44G.png ",
   "code": "#56\n@client.command(aliases=(\"macdocki\")) \nasync def dockimac(ctx):\n  field3 = content_fields[56][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#57",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 57,
   "Command": "docks",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "You can manage your docks from the View > Docks menu.\nYou can toggle docks on and off, or lock or unlock docks to prevent moving and editing.\nYou can also reset the UI from this menu to return your docks to their original state (View > Docks > Reset UI).",
   "code": "#57\n@client.command(aliases=()) \nasync def docks(ctx):\n  field3 = content_fields[57][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#58",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 58,
   "Command": "docs",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Developer documentation for OBS can be found here: https://obsproject.com/docs/",
   "code": "#58\n@client.command(aliases=()) \nasync def docs(ctx):\n  field3 = content_fields[58][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#59",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 59,
   "Command": "donate",
   "Aliases": "sponsor",
   "\", \"": "\", \"",
   "adding \", \"": "sponsor",
   "full function": "\"sponsor\"",
   "alias for code": "\"sponsor\"",
   "Text": "You can support OBS development by either becoming a patron on the OBS Patreon or by becoming a sponsor on the OBS Open Collective.\nFind out more here: https://obsproject.com/contribute",
   "code": "#59\n@client.command(aliases=(\"sponsor\")) \nasync def donate(ctx):\n  field3 = content_fields[59][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#60",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 60,
   "Command": "downgrade",
   "Aliases": "oldversions, revert",
   "\", \"": "\", \"",
   "adding \", \"": "oldversions\", \"revert",
   "full function": "\"oldversions\", \"revert\"",
   "alias for code": "\"oldversions\", \"revert\"",
   "Text": "Need an older version of OBS? Go to https://github.com/obsproject/obs-studio/releases for OBS Studio versions back to 0.2.4",
   "code": "#60\n@client.command(aliases=(\"oldversions\", \"revert\")) \nasync def downgrade(ctx):\n  field3 = content_fields[60][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#61",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 61,
   "Command": "download",
   "Aliases": "downloads",
   "\", \"": "\", \"",
   "adding \", \"": "downloads",
   "full function": "\"downloads\"",
   "alias for code": "\"downloads\"",
   "Text": "OBS Studio can be downloaded right from the OBS Project website: https://obsproject.com/download",
   "code": "#61\n@client.command(aliases=(\"downloads\")) \nasync def download(ctx):\n  field3 = content_fields[61][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#62",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 62,
   "Command": "downtime",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "The Fastly CDN currently has local connectivity issues. This affects multiple sites, including Twitch.tv, Reddit, Amazon, Github, as well as our own OBS Project website and downloads. Service should hopefully be restored shortly.",
   "code": "#62\n@client.command(aliases=()) \nasync def downtime(ctx):\n  field3 = content_fields[62][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#63",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 63,
   "Command": "dpi",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Due to issues with how Qt handles high-DPI display scaling, you may encounter some oddities in the OBS Studio UI when using DPI scaling. As a workaround, you can disabled DPI scaling for OBS:\nClose OBS Studio.\nFind your OBS Studio shortcut, either on your desktop or in your start menu (Right click -> Open file location).\nRight click on it and select \"Properties\".\nGo to the \"Compatibility tab\".\nClick \"Change high DPI settings\".\nTick \"Override high DPI scaling behavior\".\nIn the dropdown, change it to \"System (Enhanced)\".\nClick OK to exit out of the scaling settings.\nClick OK to save the new properties.\nLaunch OBS Studio as you normally would.",
   "code": "#63\n@client.command(aliases=()) \nasync def dpi(ctx):\n  field3 = content_fields[63][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#64",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 64,
   "Command": "driveby",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "https://twitter.com/cassidoo/status/1294077384128212992",
   "code": "#64\n@client.command(aliases=()) \nasync def driveby(ctx):\n  field3 = content_fields[64][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#65",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 65,
   "Command": "droste",
   "Aliases": "videofeedback",
   "\", \"": "\", \"",
   "adding \", \"": "videofeedback",
   "full function": "\"videofeedback\"",
   "alias for code": "\"videofeedback\"",
   "Text": "What you are seeing is normal and is called the Video Feedback Effect. It will go away when you stop looking at the OBS preview on the same display you're capturing. Read https://en.wikipedia.org/wiki/Video_feedback for more info.",
   "code": "#65\n@client.command(aliases=(\"videofeedback\")) \nasync def droste(ctx):\n  field3 = content_fields[65][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "#65\n@client.command(aliases=(\"videofeedback\")) \nasync def droste(ctx):\n  field3 = content_fields[65][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#66\n@client.command(aliases=(\"camcorder\")) \nasync def dslr(ctx):\n  field3 = content_fields[66][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#67\n@client.command(aliases=()) \nasync def ducking(ctx):\n  field3 = content_fields[67][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#68\n@client.command(aliases=(\"crashdump\", \"dumpfile\")) \nasync def dump(ctx):\n  field3 = content_fields[68][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#69\n@client.command(aliases=(\"directx12\")) \nasync def dx12(ctx):\n  field3 = content_fields[69][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#70\n@client.command(aliases=(\"dbr\")) \nasync def dynamicbitrate(ctx):\n  field3 = content_fields[70][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#71\n@client.command(aliases=()) \nasync def echo(ctx):\n  field3 = content_fields[71][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#72\n@client.command(aliases=()) \nasync def editor(ctx):\n  field3 = content_fields[72][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#73\n@client.command(aliases=()) \nasync def editors(ctx):\n  field3 = content_fields[73][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#74\n@client.command(aliases=()) \nasync def electron(ctx):\n  field3 = content_fields[74][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#75\n@client.command(aliases=()) \nasync def elgatocrash(ctx):\n  field3 = content_fields[75][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#76\n@client.command(aliases=()) \nasync def elgatodrivers(ctx):\n  field3 = content_fields[76][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#77\n@client.command(aliases=(\"macelgato\")) \nasync def elgatomac(ctx):\n  field3 = content_fields[77][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#78\n@client.command(aliases=()) \nasync def elgatosupport(ctx):\n  field3 = content_fields[78][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#79\n@client.command(aliases=()) \nasync def english(ctx):\n  field3 = content_fields[79][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#80\n@client.command(aliases=()) \nasync def error(ctx):\n  field3 = content_fields[80][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#81\n@client.command(aliases=(\"exclusivemode\")) \nasync def exclusive(ctx):\n  field3 = content_fields[81][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#82\n@client.command(aliases=(\"backup\")) \nasync def export(ctx):\n  field3 = content_fields[82][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#83\n@client.command(aliases=(\"fb\")) \nasync def facebook(ctx):\n  field3 = content_fields[83][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#84\n@client.command(aliases=()) \nasync def facebookbitrate(ctx):\n  field3 = content_fields[84][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#85\n@client.command(aliases=(\"ideas\", \"idea\")) \nasync def fider(ctx):\n  field3 = content_fields[85][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#86\n@client.command(aliases=(\"filter\")) \nasync def filters(ctx):\n  field3 = content_fields[86][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#87\n@client.command(aliases=()) \nasync def firefox(ctx):\n  field3 = content_fields[87][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#88\n@client.command(aliases=()) \nasync def flash(ctx):\n  field3 = content_fields[88][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#89\n@client.command(aliases=(\"fpscap\", \"vsync\", \"anthem\")) \nasync def fpslimit(ctx):\n  field3 = content_fields[89][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#90\n@client.command(aliases=(\"connection\", \"droppedframes\", \"dropped\", \"drop\", \"network\")) \nasync def framedrops(ctx):\n  field3 = content_fields[90][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#91\n@client.command(aliases=()) \nasync def free(ctx):\n  field3 = content_fields[91][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#92\n@client.command(aliases=()) \nasync def fullscreen(ctx):\n  field3 = content_fields[92][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#93\n@client.command(aliases=()) \nasync def gamecapture(ctx):\n  field3 = content_fields[93][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#94\n@client.command(aliases=(\"xboxdvr\")) \nasync def gamedvr(ctx):\n  field3 = content_fields[94][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#95\n@client.command(aliases=(\"commits\", \"github\", \"repo\", \"source\")) \nasync def git(ctx):\n  field3 = content_fields[95][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#96\n@client.command(aliases=(\"license\")) \nasync def gpl(ctx):\n  field3 = content_fields[96][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "copied code": "#65\n@client.command(aliases=(\"videofeedback\")) \nasync def droste(ctx):\n  field3 = content_fields[65][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#66\n@client.command(aliases=(\"camcorder\")) \nasync def dslr(ctx):\n  field3 = content_fields[66][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#67\n@client.command(aliases=()) \nasync def ducking(ctx):\n  field3 = content_fields[67][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#68\n@client.command(aliases=(\"crashdump\", \"dumpfile\")) \nasync def dump(ctx):\n  field3 = content_fields[68][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#69\n@client.command(aliases=(\"directx12\")) \nasync def dx12(ctx):\n  field3 = content_fields[69][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#70\n@client.command(aliases=(\"dbr\")) \nasync def dynamicbitrate(ctx):\n  field3 = content_fields[70][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#71\n@client.command(aliases=()) \nasync def echo(ctx):\n  field3 = content_fields[71][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#72\n@client.command(aliases=()) \nasync def editor(ctx):\n  field3 = content_fields[72][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#73\n@client.command(aliases=()) \nasync def editors(ctx):\n  field3 = content_fields[73][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#74\n@client.command(aliases=()) \nasync def electron(ctx):\n  field3 = content_fields[74][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#75\n@client.command(aliases=()) \nasync def elgatocrash(ctx):\n  field3 = content_fields[75][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#76\n@client.command(aliases=()) \nasync def elgatodrivers(ctx):\n  field3 = content_fields[76][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#77\n@client.command(aliases=(\"macelgato\")) \nasync def elgatomac(ctx):\n  field3 = content_fields[77][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#78\n@client.command(aliases=()) \nasync def elgatosupport(ctx):\n  field3 = content_fields[78][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#79\n@client.command(aliases=()) \nasync def english(ctx):\n  field3 = content_fields[79][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#80\n@client.command(aliases=()) \nasync def error(ctx):\n  field3 = content_fields[80][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#81\n@client.command(aliases=(\"exclusivemode\")) \nasync def exclusive(ctx):\n  field3 = content_fields[81][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#82\n@client.command(aliases=(\"backup\")) \nasync def export(ctx):\n  field3 = content_fields[82][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#83\n@client.command(aliases=(\"fb\")) \nasync def facebook(ctx):\n  field3 = content_fields[83][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#84\n@client.command(aliases=()) \nasync def facebookbitrate(ctx):\n  field3 = content_fields[84][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#85\n@client.command(aliases=(\"ideas\", \"idea\")) \nasync def fider(ctx):\n  field3 = content_fields[85][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#86\n@client.command(aliases=(\"filter\")) \nasync def filters(ctx):\n  field3 = content_fields[86][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#87\n@client.command(aliases=()) \nasync def firefox(ctx):\n  field3 = content_fields[87][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#88\n@client.command(aliases=()) \nasync def flash(ctx):\n  field3 = content_fields[88][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#89\n@client.command(aliases=(\"fpscap\", \"vsync\", \"anthem\")) \nasync def fpslimit(ctx):\n  field3 = content_fields[89][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#90\n@client.command(aliases=(\"connection\", \"droppedframes\", \"dropped\", \"drop\", \"network\")) \nasync def framedrops(ctx):\n  field3 = content_fields[90][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#91\n@client.command(aliases=()) \nasync def free(ctx):\n  field3 = content_fields[91][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#92\n@client.command(aliases=()) \nasync def fullscreen(ctx):\n  field3 = content_fields[92][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#93\n@client.command(aliases=()) \nasync def gamecapture(ctx):\n  field3 = content_fields[93][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#94\n@client.command(aliases=(\"xboxdvr\")) \nasync def gamedvr(ctx):\n  field3 = content_fields[94][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#95\n@client.command(aliases=(\"commits\", \"github\", \"repo\", \"source\")) \nasync def git(ctx):\n  field3 = content_fields[95][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#96\n@client.command(aliases=(\"license\")) \nasync def gpl(ctx):\n  field3 = content_fields[96][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "FIELD17": ""
 },
 {
   "#": "#66",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 66,
   "Command": "dslr",
   "Aliases": "camcorder",
   "\", \"": "\", \"",
   "adding \", \"": "camcorder",
   "full function": "\"camcorder\"",
   "alias for code": "\"camcorder\"",
   "Text": "DSLR cameras and camcorders are not built to be webcams. Preview functions via USB can't be used in OBS. To get a clean video and audio feed from a DSLR or camcorder, you need a HDMI capture card. Lastly, note that a high quality webcam is often cheaper than a capture card.",
   "code": "#66\n@client.command(aliases=(\"camcorder\")) \nasync def dslr(ctx):\n  field3 = content_fields[66][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#67",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 67,
   "Command": "ducking",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "If you're experiencing sound volume reduction when OBS is opened, try checking the \"Disable Windows audio ducking\" option in Settings > Audio > Advanced, in OBS. Then restart OBS to see if the issue is resolved.",
   "code": "#67\n@client.command(aliases=()) \nasync def ducking(ctx):\n  field3 = content_fields[67][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#68",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 68,
   "Command": "dump",
   "Aliases": "crashdump, dumpfile",
   "\", \"": "\", \"",
   "adding \", \"": "crashdump\", \"dumpfile",
   "full function": "\"crashdump\", \"dumpfile\"",
   "alias for code": "\"crashdump\", \"dumpfile\"",
   "Text": "Please create a memory dump file, so that we can look at the problem more closely: https://obsproject.com/forum/resources/598/",
   "code": "#68\n@client.command(aliases=(\"crashdump\", \"dumpfile\")) \nasync def dump(ctx):\n  field3 = content_fields[68][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#69",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 69,
   "Command": "dx12",
   "Aliases": "directx12",
   "\", \"": "\", \"",
   "adding \", \"": "directx12",
   "full function": "\"directx12\"",
   "alias for code": "\"directx12\"",
   "Text": "There is a known issue when using game capture to capture DirectX 12 games where frames may be returned out of order, causing a stuttering effect. We are working on ways to deal with the issue, but it will be some time before a proper fix or workaround is available. For the time being, the best solution would be to lock your game to 60FPS and change the Hook Rate setting in your game capture source to \"Fastest\". Otherwise, consider trying display capture instead of game capture.",
   "code": "#69\n@client.command(aliases=(\"directx12\")) \nasync def dx12(ctx):\n  field3 = content_fields[69][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#70",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 70,
   "Command": "dynamicbitrate",
   "Aliases": "dbr",
   "\", \"": "\", \"",
   "adding \", \"": "dbr",
   "full function": "\"dbr\"",
   "alias for code": "\"dbr\"",
   "Text": "You can enable Dynamic Bitrate in Settings -> Advanced -> Network -> \"Dynamically change bitrate to manage congestion (Beta)\"\nWhen enabled, instead of dropping frames when you have network issues, OBS will automatically reduce your stream quality to compensate. OBS will adjust back to normal once your connection becomes stable.",
   "code": "#70\n@client.command(aliases=(\"dbr\")) \nasync def dynamicbitrate(ctx):\n  field3 = content_fields[70][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#71",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 71,
   "Command": "echo",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "To avoid audio feedback or echo, don't watch your own stream on the same computer you are streaming from. If you have already ruled this out as a possible issue, please post a log. Help → Log Files → Upload Current Log. Copy the URL and paste it here.",
   "code": "#71\n@client.command(aliases=()) \nasync def echo(ctx):\n  field3 = content_fields[71][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#72",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 72,
   "Command": "editor",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Editor functionality is not something that is currently in scope for OBS development at this time. While editing features would be nice, the main focus on development in OBS right now is on improving OBS's streaming and recording features, and we're happy to leave the editing step for other, more specialized programs to handle. Here is a good list of editing software that we recommend you check out: https://obsproject.com/wiki/Post-Production-Tools-You-Can-Use",
   "code": "#72\n@client.command(aliases=()) \nasync def editor(ctx):\n  field3 = content_fields[72][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#73",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 73,
   "Command": "editors",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "List of free software for editing - https://discord.com/channels/473253164884295699/788520412299395114/788572536925323275",
   "code": "#73\n@client.command(aliases=()) \nasync def editors(ctx):\n  field3 = content_fields[73][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#74",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 74,
   "Command": "electron",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "In order to capture most electron applications using window capture you have to disable hardware acceleration first.",
   "code": "#74\n@client.command(aliases=()) \nasync def electron(ctx):\n  field3 = content_fields[74][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#75",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 75,
   "Command": "elgatocrash",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "If OBS is crashing due to Elgato's drivers, follow these steps (carefully, in order!) to correct it.\n1) Unplug your Elgato device (if USB)\n2) Uninstall all Elgato software and drivers from Add/Remove Programs\n3) Reboot your PC (Very important you do this before trying to install anything else)\n4) Reinstall the Elgato software/drivers\n5) Plug the Elgato card back in (if not already prompted to during the Elgato software installation)",
   "code": "#75\n@client.command(aliases=()) \nasync def elgatocrash(ctx):\n  field3 = content_fields[75][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#76",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 76,
   "Command": "elgatodrivers",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "In many cases, installing only the driver packages for Elgato Game Capture cards works better with OBS than installing the full software suite. Links can be found here: https://help.elgato.com/hc/en-us/articles/360027961152-Elgato-Gaming-Hardware-Drivers",
   "code": "#76\n@client.command(aliases=()) \nasync def elgatodrivers(ctx):\n  field3 = content_fields[76][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#77",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 77,
   "Command": "elgatomac",
   "Aliases": "macelgato",
   "\", \"": "\", \"",
   "adding \", \"": "macelgato",
   "full function": "\"macelgato\"",
   "alias for code": "\"macelgato\"",
   "Text": "Elgato doesn't provide macOS drivers for the HD, HD60, or HD60 S that work with OBS, so they can't be added as a Video Capture device. For these cards you'll have to capture Elgato's software running in fullscreen via Window Capture.\nHowever, Elgato now has OBS Link as a new NDI-based workaround tool for the HD 60 S to add OBS compatibility.\nFor native macOS support via UVC, please consider the Elgato Cam Link or HD60 S+ (\"plus\").",
   "code": "#77\n@client.command(aliases=(\"macelgato\")) \nasync def elgatomac(ctx):\n  field3 = content_fields[77][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#78",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 78,
   "Command": "elgatosupport",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "For help with Elgato products, please submit a ticket with them directly at https://help.elgato.com/hc/en-us/requests/new. They also have a community Discord server.",
   "code": "#78\n@client.command(aliases=()) \nasync def elgatosupport(ctx):\n  field3 = content_fields[78][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#79",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 79,
   "Command": "english",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Welcome to the official OBS Community Discord server! Unfortunately, our support volunteers can only provide support in English. Most of our support documents and guides are also only in English. If you feel comfortable using a service like Google Translate, feel free to use that to send messages to us. We'll do our best to understand your intent, and we'll try to help you as much as we can. <:google_translate:679963430438043747> Translate",
   "code": "#79\n@client.command(aliases=()) \nasync def english(ctx):\n  field3 = content_fields[79][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#80",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 80,
   "Command": "error",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Please provide the full text of the error message. Press Alt+PrtScr while the error window is selected to copy it to your clipboard, then paste it into this chat window.",
   "code": "#80\n@client.command(aliases=()) \nasync def error(ctx):\n  field3 = content_fields[80][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#81",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 81,
   "Command": "exclusive",
   "Aliases": "exclusivemode",
   "\", \"": "\", \"",
   "adding \", \"": "exclusivemode",
   "full function": "\"exclusivemode\"",
   "alias for code": "\"exclusivemode\"",
   "Text": "To disable Exclusive Mode:\n1) Right-click the speaker icon in the System Tray and select \"Sounds\".\n2) In the \"Playback\" or \"Recording\" tabs, right click on the audio device(s) you want to change and select \"Properties\".\n3) Then go to the \"Advanced\" tab and uncheck both checkboxes.",
   "code": "#81\n@client.command(aliases=(\"exclusivemode\")) \nasync def exclusive(ctx):\n  field3 = content_fields[81][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#82",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 82,
   "Command": "export",
   "Aliases": "backup",
   "\", \"": "\", \"",
   "adding \", \"": "backup",
   "full function": "\"backup\"",
   "alias for code": "\"backup\"",
   "Text": "To export OBS settings to back them up, go to Profile > Export (to export streaming/recording settings) and Scene Collection > Export (to export scenes).",
   "code": "#82\n@client.command(aliases=(\"backup\")) \nasync def export(ctx):\n  field3 = content_fields[82][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#83",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 83,
   "Command": "facebook",
   "Aliases": "fb",
   "\", \"": "\", \"",
   "adding \", \"": "fb",
   "full function": "\"fb\"",
   "alias for code": "\"fb\"",
   "Text": "A guide for streaming to Facebook is available at http://obsproject.com/forum/resources/391/",
   "code": "#83\n@client.command(aliases=(\"fb\")) \nasync def facebook(ctx):\n  field3 = content_fields[83][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#84",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 84,
   "Command": "facebookbitrate",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "You can find Facebook's recommended bitrates for different resolutions here: https://www.facebook.com/fbgaminghome/creators/best-practices#streamSettings\nHowever, our general recommendations are:\n1080p60 - 6 Mbps\n1080p30 - 6 Mbps\n720p60 - 6 Mbps\n720p30 - 3-4 Mbps, depending on the game",
   "code": "#84\n@client.command(aliases=()) \nasync def facebookbitrate(ctx):\n  field3 = content_fields[84][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#85",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 85,
   "Command": "fider",
   "Aliases": "ideas, idea",
   "\", \"": "\", \"",
   "adding \", \"": "ideas\", \"idea",
   "full function": "\"ideas\", \"idea\"",
   "alias for code": "\"ideas\", \"idea\"",
   "Text": "Have an idea for OBS Studio? Let us know! https://ideas.obsproject.com/",
   "code": "#85\n@client.command(aliases=(\"ideas\", \"idea\")) \nasync def fider(ctx):\n  field3 = content_fields[85][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#86",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 86,
   "Command": "filters",
   "Aliases": "filter",
   "\", \"": "\", \"",
   "adding \", \"": "filter",
   "full function": "\"filter\"",
   "alias for code": "\"filter\"",
   "Text": "Many options for fine-tuning your video and audio sources in OBS Studio are in the Filters menu. To access this menu, right click on your source (or click the Gear icon next to an audio source) and select Filters.\nFor more info, see our guide: https://obsproject.com/wiki/Filters-Guide",
   "code": "#86\n@client.command(aliases=(\"filter\")) \nasync def filters(ctx):\n  field3 = content_fields[86][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#87",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 87,
   "Command": "firefox",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Having trouble window capturing Firefox? You may need to disable hardware acceleration for window capture to work properly. Follow these steps to disable it:\nOpen your Firefox Options.\nIn the Find in options box, type in hardware.\nUncheck both Use recommended performance settings and Use hardware acceleration when available.\nRestart Firefox\nNote: Disabling hardware acceleration can cause performance loss on certain web pages.",
   "code": "#87\n@client.command(aliases=()) \nasync def firefox(ctx):\n  field3 = content_fields[87][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#88",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 88,
   "Command": "flash",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Old versions of Flash player installed on your system may cause OBS or the browser source to crash on startup. Please run the Flash uninstaller from https://obsproject.com/downloads/uninstall_flash_player.exe",
   "code": "#88\n@client.command(aliases=()) \nasync def flash(ctx):\n  field3 = content_fields[88][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#89",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 89,
   "Command": "fpslimit",
   "Aliases": "fpscap, vsync, anthem",
   "\", \"": "\", \"",
   "adding \", \"": "fpscap\", \"vsync\", \"anthem",
   "full function": "\"fpscap\", \"vsync\", \"anthem\"",
   "alias for code": "\"fpscap\", \"vsync\", \"anthem\"",
   "Text": "Running a game without vertical sync or a frame rate limiter will frequently cause performance issues (both your game and OBS) because your GPU will be maxed out. Enable vsync or set a reasonable frame rate limit that your GPU can handle without hitting 100% usage. If that's not enough you may also need to turn down some of the video quality options in the game.\nFor more technical details and alternate fixes, see our guide: https://obsproject.com/wiki/GPU-overload-issues",
   "code": "#89\n@client.command(aliases=(\"fpscap\", \"vsync\", \"anthem\")) \nasync def fpslimit(ctx):\n  field3 = content_fields[89][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#90",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 90,
   "Command": "framedrops",
   "Aliases": "connection, droppedframes, dropped, drop, network",
   "\", \"": "\", \"",
   "adding \", \"": "connection\", \"droppedframes\", \"dropped\", \"drop\", \"network",
   "full function": "\"connection\", \"droppedframes\", \"dropped\", \"drop\", \"network\"",
   "alias for code": "\"connection\", \"droppedframes\", \"dropped\", \"drop\", \"network\"",
   "Text": "Dropped frames? Disconnecting?\nFollow the troubleshooting steps in our [Connection Issues guide](https://obsproject.com/wiki/Dropped-Frames-and-General-Connection-Issues).",
   "code": "#90\n@client.command(aliases=(\"connection\", \"droppedframes\", \"dropped\", \"drop\", \"network\")) \nasync def framedrops(ctx):\n  field3 = content_fields[90][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#91",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 91,
   "Command": "free",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "OBS Studio is completely, 100% free. You don't have to pay for it at all. It is a great, high quality program that excels at both streaming and recording. OBS Studio is guaranteed to be completely virus and malware free, as long as you download them from the official website at https://obsproject.com/download",
   "code": "#91\n@client.command(aliases=()) \nasync def free(ctx):\n  field3 = content_fields[91][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#92",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 92,
   "Command": "fullscreen",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "If a game is set to run in full-screen mode, when you alt+tab out the game, it will stop rendering. This means that you will not see the game in OBS while it is minimized. Either make a test recording and check it to verify the capture worked properly, or move OBS to a second monitor if you have one.",
   "code": "#92\n@client.command(aliases=()) \nasync def fullscreen(ctx):\n  field3 = content_fields[92][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#93",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 93,
   "Command": "gamecapture",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "For a starting guide on game capture and its modes, please read [this guide](https://obsproject.com/wiki/Game-Capture-Guide).\nIf Game Capture isn't working properly for you and your games, make sure to read this [guide for common solutions](https://obsproject.com/wiki/Game-Capture-Guide#common-resolutions-for-game-capture-issues).",
   "code": "#93\n@client.command(aliases=()) \nasync def gamecapture(ctx):\n  field3 = content_fields[93][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#94",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 94,
   "Command": "gamedvr",
   "Aliases": "xboxdvr",
   "\", \"": "\", \"",
   "adding \", \"": "xboxdvr",
   "full function": "\"xboxdvr\"",
   "alias for code": "\"xboxdvr\"",
   "Text": "To ensure that OBS Studio has the hardware resources it needs for realtime streaming and recording, we recommend disabling the \"Game DVR Background Recording\" feature via these instructions: https://obsproject.com/wiki/How-to-disable-Windows-10-Gaming-Features#game-dvrcaptures",
   "code": "#94\n@client.command(aliases=(\"xboxdvr\")) \nasync def gamedvr(ctx):\n  field3 = content_fields[94][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#95",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 95,
   "Command": "git",
   "Aliases": "commits, github, repo, source",
   "\", \"": "\", \"",
   "adding \", \"": "commits\", \"github\", \"repo\", \"source",
   "full function": "\"commits\", \"github\", \"repo\", \"source\"",
   "alias for code": "\"commits\", \"github\", \"repo\", \"source\"",
   "Text": "The GitHub repository for OBS Studio can be found here: obsproject/obs-studio\nThe repository for the bot itself can be found here: obsproject/obs-bot",
   "code": "#95\n@client.command(aliases=(\"commits\", \"github\", \"repo\", \"source\")) \nasync def git(ctx):\n  field3 = content_fields[95][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#96",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 96,
   "Command": "gpl",
   "Aliases": "license",
   "\", \"": "\", \"",
   "adding \", \"": "license",
   "full function": "\"license\"",
   "alias for code": "\"license\"",
   "Text": "The source code for OBS Studio is released under the GPLv2 license. Effectively, that means that anyone can read, use, or modify the code for their own purposes, but if they distribute a program using that modified code, they must also make the source code available to whoever uses that program.",
   "code": "#96\n@client.command(aliases=(\"license\")) \nasync def gpl(ctx):\n  field3 = content_fields[96][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#97",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 97,
   "Command": "gpu",
   "Aliases": "apex",
   "\", \"": "\", \"",
   "adding \", \"": "apex",
   "full function": "\"apex\"",
   "alias for code": "\"apex\"",
   "Text": "If you are experiencing issues with performance while playing games, or just in general while using OBS, your GPU may be overloaded for the settings you are trying to use. Please check our GPU overload guide for ideas why this may be happening, and steps you can take to correct it.",
   "code": "#97\n@client.command(aliases=(\"apex\")) \nasync def gpu(ctx):\n  field3 = content_fields[97][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "#97\n@client.command(aliases=(\"apex\")) \nasync def gpu(ctx):\n  field3 = content_fields[97][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#98\n@client.command(aliases=(\"amdupdate\")) \nasync def gpua(ctx):\n  field3 = content_fields[98][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#99\n@client.command(aliases=()) \nasync def gpuconnection(ctx):\n  field3 = content_fields[99][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#100\n@client.command(aliases=(\"ddu\")) \nasync def gpudriver(ctx):\n  field3 = content_fields[100][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#101\n@client.command(aliases=()) \nasync def gpui(ctx):\n  field3 = content_fields[101][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#102\n@client.command(aliases=(\"gpunvidia\", \"nvidiaupdate\")) \nasync def gpun(ctx):\n  field3 = content_fields[102][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#103\n@client.command(aliases=()) \nasync def gpuz(ctx):\n  field3 = content_fields[103][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#104\n@client.command(aliases=()) \nasync def greenscreen(ctx):\n  field3 = content_fields[104][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#105\n@client.command(aliases=()) \nasync def hags(ctx):\n  field3 = content_fields[105][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#106\n@client.command(aliases=()) \nasync def hfr(ctx):\n  field3 = content_fields[106][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#107\n@client.command(aliases=(\"hello\", \"irc\")) \nasync def hi(ctx):\n  field3 = content_fields[107][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#108\n@client.command(aliases=()) \nasync def hotkeymode(ctx):\n  field3 = content_fields[108][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#109\n@client.command(aliases=(\"compile\", \"howtobuild\", \"install\", \"build\")) \nasync def howtoinstall(ctx):\n  field3 = content_fields[109][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#110\n@client.command(aliases=()) \nasync def hugh(ctx):\n  field3 = content_fields[110][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#111\n@client.command(aliases=(\"import\", \"classimport\", \"xsimport\")) \nasync def slimport(ctx):\n  field3 = content_fields[111][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#112\n@client.command(aliases=()) \nasync def invite(ctx):\n  field3 = content_fields[112][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#113\n@client.command(aliases=(\"killer\")) \nasync def killernic(ctx):\n  field3 = content_fields[113][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#114\n@client.command(aliases=()) \nasync def kraken(ctx):\n  field3 = content_fields[114][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#115\n@client.command(aliases=(\"laptop\")) \nasync def laptopdisplay(ctx):\n  field3 = content_fields[115][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#116\n@client.command(aliases=(\"llog\")) \nasync def lastlog(ctx):\n  field3 = content_fields[116][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#117\n@client.command(aliases=(\"arch\", \"aur\", \"ppa\")) \nasync def linux(ctx):\n  field3 = content_fields[117][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#118\n@client.command(aliases=(\"mplocal\", \"recording\", \"recordingguide\")) \nasync def local(ctx):\n  field3 = content_fields[118][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#119\n@client.command(aliases=()) \nasync def localadvanced(ctx):\n  field3 = content_fields[119][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#120\n@client.command(aliases=()) \nasync def loganalyzer(ctx):\n  field3 = content_fields[120][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#121\n@client.command(aliases=()) \nasync def logfolder(ctx):\n  field3 = content_fields[121][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#122\n@client.command(aliases=()) \nasync def logo(ctx):\n  field3 = content_fields[122][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#123\n@client.command(aliases=()) \nasync def lol(ctx):\n  field3 = content_fields[123][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#124\n@client.command(aliases=()) \nasync def m1ndi(ctx):\n  field3 = content_fields[124][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#125\n@client.command(aliases=()) \nasync def mac(ctx):\n  field3 = content_fields[125][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#126\n@client.command(aliases=(\"blackhole\", \"ishowu\")) \nasync def macaudio(ctx):\n  field3 = content_fields[126][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#127\n@client.command(aliases=()) \nasync def maccapture(ctx):\n  field3 = content_fields[127][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#128\n@client.command(aliases=()) \nasync def maccrash(ctx):\n  field3 = content_fields[128][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "copied code": "#97\n@client.command(aliases=(\"apex\")) \nasync def gpu(ctx):\n  field3 = content_fields[97][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#98\n@client.command(aliases=(\"amdupdate\")) \nasync def gpua(ctx):\n  field3 = content_fields[98][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#99\n@client.command(aliases=()) \nasync def gpuconnection(ctx):\n  field3 = content_fields[99][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#100\n@client.command(aliases=(\"ddu\")) \nasync def gpudriver(ctx):\n  field3 = content_fields[100][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#101\n@client.command(aliases=()) \nasync def gpui(ctx):\n  field3 = content_fields[101][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#102\n@client.command(aliases=(\"gpunvidia\", \"nvidiaupdate\")) \nasync def gpun(ctx):\n  field3 = content_fields[102][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#103\n@client.command(aliases=()) \nasync def gpuz(ctx):\n  field3 = content_fields[103][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#104\n@client.command(aliases=()) \nasync def greenscreen(ctx):\n  field3 = content_fields[104][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#105\n@client.command(aliases=()) \nasync def hags(ctx):\n  field3 = content_fields[105][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#106\n@client.command(aliases=()) \nasync def hfr(ctx):\n  field3 = content_fields[106][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#107\n@client.command(aliases=(\"hello\", \"irc\")) \nasync def hi(ctx):\n  field3 = content_fields[107][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#108\n@client.command(aliases=()) \nasync def hotkeymode(ctx):\n  field3 = content_fields[108][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#109\n@client.command(aliases=(\"compile\", \"howtobuild\", \"install\", \"build\")) \nasync def howtoinstall(ctx):\n  field3 = content_fields[109][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#110\n@client.command(aliases=()) \nasync def hugh(ctx):\n  field3 = content_fields[110][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#111\n@client.command(aliases=(\"import\", \"classimport\", \"xsimport\")) \nasync def slimport(ctx):\n  field3 = content_fields[111][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#112\n@client.command(aliases=()) \nasync def invite(ctx):\n  field3 = content_fields[112][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#113\n@client.command(aliases=(\"killer\")) \nasync def killernic(ctx):\n  field3 = content_fields[113][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#114\n@client.command(aliases=()) \nasync def kraken(ctx):\n  field3 = content_fields[114][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#115\n@client.command(aliases=(\"laptop\")) \nasync def laptopdisplay(ctx):\n  field3 = content_fields[115][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#116\n@client.command(aliases=(\"llog\")) \nasync def lastlog(ctx):\n  field3 = content_fields[116][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#117\n@client.command(aliases=(\"arch\", \"aur\", \"ppa\")) \nasync def linux(ctx):\n  field3 = content_fields[117][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#118\n@client.command(aliases=(\"mplocal\", \"recording\", \"recordingguide\")) \nasync def local(ctx):\n  field3 = content_fields[118][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#119\n@client.command(aliases=()) \nasync def localadvanced(ctx):\n  field3 = content_fields[119][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#120\n@client.command(aliases=()) \nasync def loganalyzer(ctx):\n  field3 = content_fields[120][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#121\n@client.command(aliases=()) \nasync def logfolder(ctx):\n  field3 = content_fields[121][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#122\n@client.command(aliases=()) \nasync def logo(ctx):\n  field3 = content_fields[122][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#123\n@client.command(aliases=()) \nasync def lol(ctx):\n  field3 = content_fields[123][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#124\n@client.command(aliases=()) \nasync def m1ndi(ctx):\n  field3 = content_fields[124][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#125\n@client.command(aliases=()) \nasync def mac(ctx):\n  field3 = content_fields[125][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#126\n@client.command(aliases=(\"blackhole\", \"ishowu\")) \nasync def macaudio(ctx):\n  field3 = content_fields[126][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#127\n@client.command(aliases=()) \nasync def maccapture(ctx):\n  field3 = content_fields[127][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#128\n@client.command(aliases=()) \nasync def maccrash(ctx):\n  field3 = content_fields[128][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "FIELD17": ""
 },
 {
   "#": "#98",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 98,
   "Command": "gpua",
   "Aliases": "amdupdate",
   "\", \"": "\", \"",
   "adding \", \"": "amdupdate",
   "full function": "\"amdupdate\"",
   "alias for code": "\"amdupdate\"",
   "Text": "You need to update your AMD video driver. You have 2 ways you can do this:\nUpdate using the AMD Driver Auto-Detect Tool, available at this link: https://www.amd.com/en/support/kb/faq/gpu-131\nUpdate by selecting your specific video card type at this link: https://www.amd.com/en/support\nAlways reboot your PC once your drivers are updated, even if you are not prompted to.",
   "code": "#98\n@client.command(aliases=(\"amdupdate\")) \nasync def gpua(ctx):\n  field3 = content_fields[98][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#99",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 99,
   "Command": "gpuconnection",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "https://i.imgur.com/3Z5RETY.png",
   "code": "#99\n@client.command(aliases=()) \nasync def gpuconnection(ctx):\n  field3 = content_fields[99][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#100",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 100,
   "Command": "gpudriver",
   "Aliases": "ddu",
   "\", \"": "\", \"",
   "adding \", \"": "ddu",
   "full function": "\"ddu\"",
   "alias for code": "\"ddu\"",
   "Text": "You can perform a clean driver installation for your GPU by following the instructions at http://obsproject.com/forum/resources/65/.\nUsing an AMD GPU? Use the AMD Cleanup Utility instead. https://www.amd.com/en/support/kb/faq/gpu-601",
   "code": "#100\n@client.command(aliases=(\"ddu\")) \nasync def gpudriver(ctx):\n  field3 = content_fields[100][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#101",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 101,
   "Command": "gpui",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "You need to update your Intel video driver. You have 2 ways you can do this:\nUpdate using the Intel Driver & Support Assistant, available at this link: https://www.intel.com/content/www/us/en/support/detect.html\nUpdate by selecting the appropriate driver for your OS and GPU, at this link: https://downloadcenter.intel.com/product/80939/Graphics-Drivers\nAlways reboot your PC once your drivers are updated, even if you are not prompted to.",
   "code": "#101\n@client.command(aliases=()) \nasync def gpui(ctx):\n  field3 = content_fields[101][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#102",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 102,
   "Command": "gpun",
   "Aliases": "gpunvidia, nvidiaupdate",
   "\", \"": "\", \"",
   "adding \", \"": "gpunvidia\", \"nvidiaupdate",
   "full function": "\"gpunvidia\", \"nvidiaupdate\"",
   "alias for code": "\"gpunvidia\", \"nvidiaupdate\"",
   "Text": "You need to update your NVIDIA drivers. You have 2 ways you can do it:\nOpen GeForce Experience if it's installed on your PC. Login, click on DRIVERS, then select Download. Install it fully, then reboot.\nOR\nManually download your drivers using this link: https://www.geforce.com/drivers\nMake sure to reboot your PC once the drivers are installed.",
   "code": "#102\n@client.command(aliases=(\"gpunvidia\", \"nvidiaupdate\")) \nasync def gpun(ctx):\n  field3 = content_fields[102][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#103",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 103,
   "Command": "gpuz",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Please download GPU-Z and post a screenshot of the Graphics Card tab. Click the 📷 button in the upper right and select Upload to Free Image Hosting, then post the link here.\nDownload link: https://www.techpowerup.com/download/techpowerup-gpu-z/",
   "code": "#103\n@client.command(aliases=()) \nasync def gpuz(ctx):\n  field3 = content_fields[103][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#104",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 104,
   "Command": "greenscreen",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "For an in-depth overview of greenscreens and how they work, and how you can improve your own, check out this video: https://www.youtube.com/watch?v=OH8TWTt51W8",
   "code": "#104\n@client.command(aliases=()) \nasync def greenscreen(ctx):\n  field3 = content_fields[104][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#105",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 105,
   "Command": "hags",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "In Windows, go to ⚙️ Settings → System → Display → Graphics Settings.\nTurn \"Hardware-accelerated GPU scheduling\" to OFF, then reboot your computer.",
   "code": "#105\n@client.command(aliases=()) \nasync def hags(ctx):\n  field3 = content_fields[105][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#106",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 106,
   "Command": "hfr",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "To record framerates higher than 60fps, you will need very powerful hardware (SSD, high-end GPU, significant CPU overhead, fast RAM) in order to accomplish it. There are no simple instructions that will make it work. It is recommended that you stay at or under 120fps when using OBS, and we may be unable to provide support for higher framerates if your hardware cannot handle it. Be prepared for hours of trial and error on your own.",
   "code": "#106\n@client.command(aliases=()) \nasync def hfr(ctx):\n  field3 = content_fields[106][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#107",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 107,
   "Command": "hi",
   "Aliases": "hello, irc",
   "\", \"": "\", \"",
   "adding \", \"": "hello\", \"irc",
   "full function": "\"hello\", \"irc\"",
   "alias for code": "\"hello\", \"irc\"",
   "Text": "Welcome to the Alpha Gaming community support channel. If you have a question, go ahead and ask it, and if someone is available to help they'll respond. Try to be as detailed as possible. Please be patient if someone doesn't respond right away!",
   "code": "#107\n@client.command(aliases=(\"hello\", \"irc\")) \nasync def hi(ctx):\n  field3 = content_fields[107][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#108",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 108,
   "Command": "hotkeymode",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Game capture sources allow you to use a hotkey mode to capture the currently active window, allowing you to use one game capture source for all of your games and even allowing you to switch games easily. To activate this mode:\nOpen the game capture source's properties. (You can do this by double clicking on the source in the sources list)\nChange the game capture's Mode to \"Capture foreground window with hotkey\"\nIn Settings > Hotkeys, set up a hotkey for \"Capture foreground window\".",
   "code": "#108\n@client.command(aliases=()) \nasync def hotkeymode(ctx):\n  field3 = content_fields[108][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#109",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 109,
   "Command": "howtoinstall",
   "Aliases": "compile, howtobuild, install, build",
   "\", \"": "\", \"",
   "adding \", \"": "compile\", \"howtobuild\", \"install\", \"build",
   "full function": "\"compile\", \"howtobuild\", \"install\", \"build\"",
   "alias for code": "\"compile\", \"howtobuild\", \"install\", \"build\"",
   "Text": "Instructions on how to install or build OBS Studio can be found here:\nhttps://obsproject.com/wiki/Install-Instructions",
   "code": "#109\n@client.command(aliases=(\"compile\", \"howtobuild\", \"install\", \"build\")) \nasync def howtoinstall(ctx):\n  field3 = content_fields[109][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#110",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 110,
   "Command": "hugh",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "https://clips.twitch.tv/OriginalEmpathicGoldfishBlargNaut",
   "code": "#110\n@client.command(aliases=()) \nasync def hugh(ctx):\n  field3 = content_fields[110][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#111",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 111,
   "Command": "slimport",
   "Aliases": "import, classimport, xsimport",
   "\", \"": "\", \"",
   "adding \", \"": "import\", \"classimport\", \"xsimport",
   "full function": "\"import\", \"classimport\", \"xsimport\"",
   "alias for code": "\"import\", \"classimport\", \"xsimport\"",
   "Text": "As of OBS Studio 25, you can import Scene Collections from other applications, including OBS Classic, XSplit, and Streamlabs.\nIn OBS Studio, open the \"Scene Collection\" menu along the top\nChoose \"Import\"\nIf asked to \"Automatically Search for Scene Collections\", choose \"Yes\" ^\nUse the checkboxes ✅ on the left to choose what to import\nPress \"Import\" along the bottom\nSwitch to the newly imported Collection via the \"Scene Collection\" menu\n^ If the dialog did not appear, or you previously selected \"No\", go to Settings -> General -> Importers and enable \"Search known locations..\"",
   "code": "#111\n@client.command(aliases=(\"import\", \"classimport\", \"xsimport\")) \nasync def slimport(ctx):\n  field3 = content_fields[111][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#112",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 112,
   "Command": "invite",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "https://obsproject.com/discord",
   "code": "#112\n@client.command(aliases=()) \nasync def invite(ctx):\n  field3 = content_fields[112][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#113",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 113,
   "Command": "killernic",
   "Aliases": "killer",
   "\", \"": "\", \"",
   "adding \", \"": "killer",
   "full function": "\"killer\"",
   "alias for code": "\"killer\"",
   "Text": "Killer's Firewall is known for its poor performance and issues when trying to stream. Please download the driver only package from http://support.killernetworking.com/software/, completely uninstall all Killer NIC items and install their Driver only package.",
   "code": "#113\n@client.command(aliases=(\"killer\")) \nasync def killernic(ctx):\n  field3 = content_fields[113][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#114",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 114,
   "Command": "kraken",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Problems getting the Razer Kraken working? Make sure you're using the 64-bit version of OBS. If you're stuck on a 32-bit system or the 64bit OBS still doesn't work, try disabling the Kraken launcher in msconfig's Startup tab (press WinKey+R, type \"msconfig\" in the box and press Enter) and reboot your pc.",
   "code": "#114\n@client.command(aliases=()) \nasync def kraken(ctx):\n  field3 = content_fields[114][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#115",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 115,
   "Command": "laptopdisplay",
   "Aliases": "laptop",
   "\", \"": "\", \"",
   "adding \", \"": "laptop",
   "full function": "\"laptop\"",
   "alias for code": "\"laptop\"",
   "Text": "If you're using OBS Studio 27+ on Windows 10 1809 or earlier, your system must be configured to run OBS on a specific GPU, depending on the type of capture you are trying to do.\n[Click here](https://obsproject.com/wiki/Laptop-Troubleshooting) for instructions on how to configure your system.",
   "code": "#115\n@client.command(aliases=(\"laptop\")) \nasync def laptopdisplay(ctx):\n  field3 = content_fields[115][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#116",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 116,
   "Command": "lastlog",
   "Aliases": "llog",
   "\", \"": "\", \"",
   "adding \", \"": "llog",
   "full function": "\"llog\"",
   "alias for code": "\"llog\"",
   "Text": "A log file is required to help fix your issue. Please post a link to your last log file.\nIn OBS select Help > Log Files > Upload Last Log File.\nCopy the URL and paste it here.\n(Note: If you do not see an obsproject.com URL, you will need to update OBS Studio to version 22+)",
   "code": "#116\n@client.command(aliases=(\"llog\")) \nasync def lastlog(ctx):\n  field3 = content_fields[116][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#117",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 117,
   "Command": "linux",
   "Aliases": "arch, aur, ppa",
   "\", \"": "\", \"",
   "adding \", \"": "arch\", \"aur\", \"ppa",
   "full function": "\"arch\", \"aur\", \"ppa\"",
   "alias for code": "\"arch\", \"aur\", \"ppa\"",
   "Text": "http://obsproject.com/download#linux",
   "code": "#117\n@client.command(aliases=(\"arch\", \"aur\", \"ppa\")) \nasync def linux(ctx):\n  field3 = content_fields[117][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#118",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 118,
   "Command": "local",
   "Aliases": "mplocal, recording, recordingguide",
   "\", \"": "\", \"",
   "adding \", \"": "mplocal\", \"recording\", \"recordingguide",
   "full function": "\"mplocal\", \"recording\", \"recordingguide\"",
   "alias for code": "\"mplocal\", \"recording\", \"recordingguide\"",
   "Text": "For high-quality, no fuss recordings, use the recording quality presets.\n1) Under Settings > Output, set the mode to Simple output.\n2) In the recording section, change the Recording Quality to Indistinguishable Quality\n3) Select your encoder. We recommend a hardware encoder if it is available.",
   "code": "#118\n@client.command(aliases=(\"mplocal\", \"recording\", \"recordingguide\")) \nasync def local(ctx):\n  field3 = content_fields[118][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#119",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 119,
   "Command": "localadvanced",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "For an advanced guide to local recording settings, see: http://obsproject.com/forum/resources/221/",
   "code": "#119\n@client.command(aliases=()) \nasync def localadvanced(ctx):\n  field3 = content_fields[119][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#120",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 120,
   "Command": "loganalyzer",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "To analyze an OBS log, you can use this online tool: https://obsproject.com/tools/analyzer",
   "code": "#120\n@client.command(aliases=()) \nasync def loganalyzer(ctx):\n  field3 = content_fields[120][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#121",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 121,
   "Command": "logfolder",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "To see all of your logs, select Help > Log Files > Show Log Files.\nIf you want to manually analyse a log, upload it's contents to a service like Hastebin and use this tool.",
   "code": "#121\n@client.command(aliases=()) \nasync def logfolder(ctx):\n  field3 = content_fields[121][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#122",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 122,
   "Command": "logo",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "High-quality versions of the OBS logo can be found here:\nhttps://h4ndy.eu/seafile/d/ecaab7abeee84c4aabf1/",
   "code": "#122\n@client.command(aliases=()) \nasync def logo(ctx):\n  field3 = content_fields[122][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#123",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 123,
   "Command": "lol",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "To best capture League of Legends, create two scenes.\nIn the first scene, add a Window Capture of the LoL launcher/lobby (Windows 7 users should make sure Aero is enabled.).\nIn the second scene, add a Game Capture of the game itself (you may need to be in a game to add this for the first time).\nThen configure the Scene Switcher to automatically swap between them.",
   "code": "#123\n@client.command(aliases=()) \nasync def lol(ctx):\n  field3 = content_fields[123][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#124",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 124,
   "Command": "m1ndi",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "1) Close OBS\n2) Download and install Newtek NDI®️ Studio Monitor and the OBS NDI®️ plugin\n3) Open the Terminal app (you can find it in launchpad, comes pre-installed with every Mac)\n4) Paste the following command into the terminal\nsudo cp \"/Applications/NewTek NDI Video Monitor.app/Contents/Frameworks/libndi.4.dylib\" /usr/local/lib/libndi.4.dylib\n5) Input your password (note: you will not see the password being put in, but it will be working)\n6) Open OBS and check if NDI appears in the Tools menu",
   "code": "#124\n@client.command(aliases=()) \nasync def m1ndi(ctx):\n  field3 = content_fields[124][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#125",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 125,
   "Command": "mac",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Releases of OBS for Mac can be found at http://obsproject.com/download (click the Apple!)\nIf you have any issues, please check the forum threads at https://obsproject.com/forum/list/33/\nYou must be on macOS 10.13 or later. You can update to version 10.13 of macOS (free!) http://www.apple.com/macos/how-to-upgrade/",
   "code": "#125\n@client.command(aliases=()) \nasync def mac(ctx):\n  field3 = content_fields[125][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#126",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 126,
   "Command": "macaudio",
   "Aliases": "blackhole, ishowu",
   "\", \"": "\", \"",
   "adding \", \"": "blackhole\", \"ishowu",
   "full function": "\"blackhole\", \"ishowu\"",
   "alias for code": "\"blackhole\", \"ishowu\"",
   "Text": "OBS Studio for macOS requires a second program to help it capture desktop audio, due to Apple not providing direct audio capture functionality\nClick here for a guide using [BlackHole](https://obsproject.com/forum/resources/1191/)",
   "code": "#126\n@client.command(aliases=(\"blackhole\", \"ishowu\")) \nasync def macaudio(ctx):\n  field3 = content_fields[126][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#127",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 127,
   "Command": "maccapture",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Due to limitations from Apple, there is no Game Capture source available on macOS 10.14+. It is recommended that you use Display or Window Capture sources instead.",
   "code": "#127\n@client.command(aliases=()) \nasync def maccapture(ctx):\n  field3 = content_fields[127][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#128",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 128,
   "Command": "maccrash",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "A crash log is required to investigate the cause of your issue. Please upload the most recent crash log.\nIn Finder, click the Go menu\nSelect Go To Folder, and type in ~/Library/Logs/DiagnosticReports/\nUpload the file prefixed obs_ with the most recent date (format is year-month-day)",
   "code": "#128\n@client.command(aliases=()) \nasync def maccrash(ctx):\n  field3 = content_fields[128][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#129",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 129,
   "Command": "macdocks",
   "Aliases": "linuxdocks",
   "\", \"": "\", \"",
   "adding \", \"": "linuxdocks",
   "full function": "\"linuxdocks\"",
   "alias for code": "\"linuxdocks\"",
   "Text": "Custom browser docks and service integrations will be available in OBS Studio v27 for macOS and the Ubuntu PPA.",
   "code": "#129\n@client.command(aliases=(\"linuxdocks\")) \nasync def macdocks(ctx):\n  field3 = content_fields[129][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "#129\n@client.command(aliases=(\"linuxdocks\")) \nasync def macdocks(ctx):\n  field3 = content_fields[129][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#130\n@client.command(aliases=()) \nasync def maclogi(ctx):\n  field3 = content_fields[130][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#131\n@client.command(aliases=(\"macmin\")) \nasync def macminimum(ctx):\n  field3 = content_fields[131][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#132\n@client.command(aliases=()) \nasync def macndi(ctx):\n  field3 = content_fields[132][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#133\n@client.command(aliases=(\"macversions\")) \nasync def macosversions(ctx):\n  field3 = content_fields[133][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#134\n@client.command(aliases=(\"macospermission\", \"macprivacy\", \"macpermissions\")) \nasync def macpermission(ctx):\n  field3 = content_fields[134][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#135\n@client.command(aliases=()) \nasync def mantis(ctx):\n  field3 = content_fields[135][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#136\n@client.command(aliases=(\"manualcapture\")) \nasync def manualcam(ctx):\n  field3 = content_fields[136][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#137\n@client.command(aliases=()) \nasync def manualcrash(ctx):\n  field3 = content_fields[137][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#138\n@client.command(aliases=()) \nasync def manuallog(ctx):\n  field3 = content_fields[138][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#139\n@client.command(aliases=()) \nasync def manualpastebin(ctx):\n  field3 = content_fields[139][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#140\n@client.command(aliases=(\"mediasource\", \"stinger\")) \nasync def media(ctx):\n  field3 = content_fields[140][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#141\n@client.command(aliases=()) \nasync def memes(ctx):\n  field3 = content_fields[141][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#142\n@client.command(aliases=()) \nasync def mic(ctx):\n  field3 = content_fields[142][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#143\n@client.command(aliases=(\"mc\")) \nasync def minecraft(ctx):\n  field3 = content_fields[143][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#144\n@client.command(aliases=()) \nasync def mixer(ctx):\n  field3 = content_fields[144][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#145\n@client.command(aliases=()) \nasync def mobile(ctx):\n  field3 = content_fields[145][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#146\n@client.command(aliases=(\"macgamecapture\", \"macgc\")) \nasync def mojave(ctx):\n  field3 = content_fields[146][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#147\n@client.command(aliases=(\"flv\", \"flvmp4\", \"mkv\")) \nasync def mp4(ctx):\n  field3 = content_fields[147][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#148\n@client.command(aliases=()) \nasync def multirtmp(ctx):\n  field3 = content_fields[148][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#149\n@client.command(aliases=()) \nasync def ndi(ctx):\n  field3 = content_fields[149][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#150\n@client.command(aliases=()) \nasync def ndisdk(ctx):\n  field3 = content_fields[150][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#151\n@client.command(aliases=()) \nasync def nditools(ctx):\n  field3 = content_fields[151][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#152\n@client.command(aliases=(\"guide\")) \nasync def new(ctx):\n  field3 = content_fields[152][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#153\n@client.command(aliases=(\"newsc\")) \nasync def newscenecollection(ctx):\n  field3 = content_fields[153][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#154\n@client.command(aliases=()) \nasync def nginx(ctx):\n  field3 = content_fields[154][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#155\n@client.command(aliases=(\"macnightly\")) \nasync def nightly(ctx):\n  field3 = content_fields[155][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#156\n@client.command(aliases=(\"afx\")) \nasync def nvafx(ctx):\n  field3 = content_fields[156][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#157\n@client.command(aliases=(\"opencollective\")) \nasync def oc(ctx):\n  field3 = content_fields[157][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#158\n@client.command(aliases=(\"glxinfo\")) \nasync def opengl(ctx):\n  field3 = content_fields[158][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#159\n@client.command(aliases=(\"parameters\", \"launchoptions\")) \nasync def params(ctx):\n  field3 = content_fields[159][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#160\n@client.command(aliases=(\"full\")) \nasync def partial(ctx):\n  field3 = content_fields[160][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "copied code": "#129\n@client.command(aliases=(\"linuxdocks\")) \nasync def macdocks(ctx):\n  field3 = content_fields[129][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#130\n@client.command(aliases=()) \nasync def maclogi(ctx):\n  field3 = content_fields[130][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#131\n@client.command(aliases=(\"macmin\")) \nasync def macminimum(ctx):\n  field3 = content_fields[131][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#132\n@client.command(aliases=()) \nasync def macndi(ctx):\n  field3 = content_fields[132][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#133\n@client.command(aliases=(\"macversions\")) \nasync def macosversions(ctx):\n  field3 = content_fields[133][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#134\n@client.command(aliases=(\"macospermission\", \"macprivacy\", \"macpermissions\")) \nasync def macpermission(ctx):\n  field3 = content_fields[134][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#135\n@client.command(aliases=()) \nasync def mantis(ctx):\n  field3 = content_fields[135][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#136\n@client.command(aliases=(\"manualcapture\")) \nasync def manualcam(ctx):\n  field3 = content_fields[136][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#137\n@client.command(aliases=()) \nasync def manualcrash(ctx):\n  field3 = content_fields[137][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#138\n@client.command(aliases=()) \nasync def manuallog(ctx):\n  field3 = content_fields[138][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#139\n@client.command(aliases=()) \nasync def manualpastebin(ctx):\n  field3 = content_fields[139][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#140\n@client.command(aliases=(\"mediasource\", \"stinger\")) \nasync def media(ctx):\n  field3 = content_fields[140][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#141\n@client.command(aliases=()) \nasync def memes(ctx):\n  field3 = content_fields[141][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#142\n@client.command(aliases=()) \nasync def mic(ctx):\n  field3 = content_fields[142][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#143\n@client.command(aliases=(\"mc\")) \nasync def minecraft(ctx):\n  field3 = content_fields[143][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#144\n@client.command(aliases=()) \nasync def mixer(ctx):\n  field3 = content_fields[144][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#145\n@client.command(aliases=()) \nasync def mobile(ctx):\n  field3 = content_fields[145][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#146\n@client.command(aliases=(\"macgamecapture\", \"macgc\")) \nasync def mojave(ctx):\n  field3 = content_fields[146][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#147\n@client.command(aliases=(\"flv\", \"flvmp4\", \"mkv\")) \nasync def mp4(ctx):\n  field3 = content_fields[147][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#148\n@client.command(aliases=()) \nasync def multirtmp(ctx):\n  field3 = content_fields[148][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#149\n@client.command(aliases=()) \nasync def ndi(ctx):\n  field3 = content_fields[149][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#150\n@client.command(aliases=()) \nasync def ndisdk(ctx):\n  field3 = content_fields[150][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#151\n@client.command(aliases=()) \nasync def nditools(ctx):\n  field3 = content_fields[151][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#152\n@client.command(aliases=(\"guide\")) \nasync def new(ctx):\n  field3 = content_fields[152][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#153\n@client.command(aliases=(\"newsc\")) \nasync def newscenecollection(ctx):\n  field3 = content_fields[153][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#154\n@client.command(aliases=()) \nasync def nginx(ctx):\n  field3 = content_fields[154][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#155\n@client.command(aliases=(\"macnightly\")) \nasync def nightly(ctx):\n  field3 = content_fields[155][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#156\n@client.command(aliases=(\"afx\")) \nasync def nvafx(ctx):\n  field3 = content_fields[156][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#157\n@client.command(aliases=(\"opencollective\")) \nasync def oc(ctx):\n  field3 = content_fields[157][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#158\n@client.command(aliases=(\"glxinfo\")) \nasync def opengl(ctx):\n  field3 = content_fields[158][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#159\n@client.command(aliases=(\"parameters\", \"launchoptions\")) \nasync def params(ctx):\n  field3 = content_fields[159][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#160\n@client.command(aliases=(\"full\")) \nasync def partial(ctx):\n  field3 = content_fields[160][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "FIELD17": ""
 },
 {
   "#": "#130",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 130,
   "Command": "maclogi",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "https://i.imgur.com/wxwjVdr.png",
   "code": "#130\n@client.command(aliases=()) \nasync def maclogi(ctx):\n  field3 = content_fields[130][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#131",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 131,
   "Command": "macminimum",
   "Aliases": "macmin",
   "\", \"": "\", \"",
   "adding \", \"": "macmin",
   "full function": "\"macmin\"",
   "alias for code": "\"macmin\"",
   "Text": "OBS Studio 25+ requires macOS 10.13+.",
   "code": "#131\n@client.command(aliases=(\"macmin\")) \nasync def macminimum(ctx):\n  field3 = content_fields[131][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#132",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 132,
   "Command": "macndi",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Close OBS\nManually update obs-ndi via this link\nRun this script\nTry running OBS again",
   "code": "#132\n@client.command(aliases=()) \nasync def macndi(ctx):\n  field3 = content_fields[132][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#133",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 133,
   "Command": "macosversions",
   "Aliases": "macversions",
   "\", \"": "\", \"",
   "adding \", \"": "macversions",
   "full function": "\"macversions\"",
   "alias for code": "\"macversions\"",
   "Text": "For High Sierra (10.13) & newer, use OBS Studio 25+ (recommended)\nOlder versions\nUpdate macOS if you can. We no longer provide support for these older versions.\nFor Sierra (10.12), use OBS 24.0.6\nFor El Capitan (10.11), use OBS 21.1.1\nFor Yosemite (10.10), use OBS 20.1.0",
   "code": "#133\n@client.command(aliases=(\"macversions\")) \nasync def macosversions(ctx):\n  field3 = content_fields[133][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#134",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 134,
   "Command": "macpermission",
   "Aliases": "macospermission, macprivacy, macpermissions",
   "\", \"": "\", \"",
   "adding \", \"": "macospermission\", \"macprivacy\", \"macpermissions",
   "full function": "\"macospermission\", \"macprivacy\", \"macpermissions\"",
   "alias for code": "\"macospermission\", \"macprivacy\", \"macpermissions\"",
   "Text": "Please ensure OBS has permissions to access your microphone & capture devices.\n1) Select System Preferences from the Apple menu.\n2) Click the icon labelled Security & Privacy.\n3) Click the Privacy tab at the top.\n4) In the lefthand column, click on 'Microphone', 'Camera', 'Screen recording' or 'Accessibility' to manage app permissions.\n5) Tick the box for OBS",
   "code": "#134\n@client.command(aliases=(\"macospermission\", \"macprivacy\", \"macpermissions\")) \nasync def macpermission(ctx):\n  field3 = content_fields[134][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#135",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 135,
   "Command": "mantis",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "http://obsproject.com/mantis/",
   "code": "#135\n@client.command(aliases=()) \nasync def mantis(ctx):\n  field3 = content_fields[135][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#136",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 136,
   "Command": "manualcam",
   "Aliases": "manualcapture",
   "\", \"": "\", \"",
   "adding \", \"": "manualcapture",
   "full function": "\"manualcapture\"",
   "alias for code": "\"manualcapture\"",
   "Text": "If your video capture device is not displaying video in OBS, try setting the resolution and FPS to something known that the device supports. Go to the Video Capture Device properties, change Resolution/FPS Type from Device Default to Custom, and then set the options accordingly.",
   "code": "#136\n@client.command(aliases=(\"manualcapture\")) \nasync def manualcam(ctx):\n  field3 = content_fields[136][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#137",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 137,
   "Command": "manualcrash",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "To find the OBS Studio crash logs, follow these steps:\nPress `WinKey+R` to open the Run dialog\nType in: `%APPDATA%\\obs-studio\\crashes` and press Enter\nUpload the desired crash log, usually the latest, directly to this Discord channel by dragging and dropping the file into the chat window",
   "code": "#137\n@client.command(aliases=()) \nasync def manualcrash(ctx):\n  field3 = content_fields[137][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#138",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 138,
   "Command": "manuallog",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Please manually upload your log file.\n(Windows)\nPress `WinKey+R` to open the Run dialog\nPaste the following into the box and hit OK: `%APPDATA%\\obs-studio\\logs`\nFind the desired log file (usually the latest) and drag/drop it into this channel.\nLinux logs: `~/.config/obs-studio/logs`\nmacOS logs: `~/Library/Application Support/obs-studio/logs`",
   "code": "#138\n@client.command(aliases=()) \nasync def manuallog(ctx):\n  field3 = content_fields[138][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#139",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 139,
   "Command": "manualpastebin",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Go to:\nWindows: `%APPDATA%\\obs-studio\\logs`\nLinux: `~/.config/obs-studio/logs`\nMac: `~/Library/Application Support/obs-studio/logs`\nThen copy the contents of the desired log (usually the latest) file to https://pastebin.com/. Save the file on Pastebin at the bottom of the window, then copy the new URL and paste it here.",
   "code": "#139\n@client.command(aliases=()) \nasync def manualpastebin(ctx):\n  field3 = content_fields[139][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#140",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 140,
   "Command": "media",
   "Aliases": "mediasource, stinger",
   "\", \"": "\", \"",
   "adding \", \"": "mediasource\", \"stinger",
   "full function": "\"mediasource\", \"stinger\"",
   "alias for code": "\"mediasource\", \"stinger\"",
   "Text": "Curious what video formats are the most performant in OBS?\nCheck out [EposVox's in-depth analysis!](https://www.youtube.com/watch?v=X9jMna8KQyA&feature=youtu.be)",
   "code": "#140\n@client.command(aliases=(\"mediasource\", \"stinger\")) \nasync def media(ctx):\n  field3 = content_fields[140][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#141",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 141,
   "Command": "memes",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "No.",
   "code": "#141\n@client.command(aliases=()) \nasync def memes(ctx):\n  field3 = content_fields[141][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#142",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 142,
   "Command": "mic",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "To filter out background noise, use the Noise Suppression filter which is included in OBS Studio 26.0.0+",
   "code": "#142\n@client.command(aliases=()) \nasync def mic(ctx):\n  field3 = content_fields[142][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#143",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 143,
   "Command": "minecraft",
   "Aliases": "mc",
   "\", \"": "\", \"",
   "adding \", \"": "mc",
   "full function": "\"mc\"",
   "alias for code": "\"mc\"",
   "Text": "To capture Minecraft Java Edition, make sure the Game Capture \"Mode\" is set to \"Capture specific window\", and select javaw/minecraft in the \"Window\" drop down.\nIf you are still having issues please follow our [Minecraft capture guide](https://obsproject.com/wiki/Minecraft-Not-Working-With-Game-Capture)",
   "code": "#143\n@client.command(aliases=(\"mc\")) \nasync def minecraft(ctx):\n  field3 = content_fields[143][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#144",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 144,
   "Command": "mixer",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Curious what all the extra information in OBS' volume meters is? Check out our guide here: https://obsproject.com/wiki/Understanding-The-Mixer",
   "code": "#144\n@client.command(aliases=()) \nasync def mixer(ctx):\n  field3 = content_fields[144][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#145",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 145,
   "Command": "mobile",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "OBS will not be developed for mobile devices. Mobile hardware is typically too weak to do what OBS does, and mobile development is currently outside the scope of what the project can work on right now. If all you're looking for is a way to control OBS through your phone, please type !remote.",
   "code": "#145\n@client.command(aliases=()) \nasync def mobile(ctx):\n  field3 = content_fields[145][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#146",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 146,
   "Command": "mojave",
   "Aliases": "macgamecapture, macgc",
   "\", \"": "\", \"",
   "adding \", \"": "macgamecapture\", \"macgc",
   "full function": "\"macgamecapture\", \"macgc\"",
   "alias for code": "\"macgamecapture\", \"macgc\"",
   "Text": "As of macOS 10.14 (Mojave), SyphonInject will no longer work on macOS, which means that Game Capture cannot be used. Game Capture on macOS relied on SyphonInject to work at all. Use a Window Capture or Display Capture instead of your Game Capture. We apologize for the inconvenience.",
   "code": "#146\n@client.command(aliases=(\"macgamecapture\", \"macgc\")) \nasync def mojave(ctx):\n  field3 = content_fields[146][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#147",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 147,
   "Command": "mp4",
   "Aliases": "flv, flvmp4, mkv",
   "\", \"": "\", \"",
   "adding \", \"": "flv\", \"flvmp4\", \"mkv",
   "full function": "\"flv\", \"flvmp4\", \"mkv\"",
   "alias for code": "\"flv\", \"flvmp4\", \"mkv\"",
   "Text": "Record to FLV or MKV. If you record to MP4 and the recording is interrupted, the file will be corrupted and unrecoverable. If you require MP4 files for some other purpose like editing, remux them afterwards by selecting File > Remux Recordings in the main OBS Studio window.",
   "code": "#147\n@client.command(aliases=(\"flv\", \"flvmp4\", \"mkv\")) \nasync def mp4(ctx):\n  field3 = content_fields[147][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#148",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 148,
   "Command": "multirtmp",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "A third party plug-in for streaming to multiple RTMP servers is available for OBS Studio. https://obsproject.com/forum/resources/multiple-rtmp-outputs-plugin.964",
   "code": "#148\n@client.command(aliases=()) \nasync def multirtmp(ctx):\n  field3 = content_fields[148][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#149",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 149,
   "Command": "ndi",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "OBS Studio has an NDI plugin available, which can be found here: https://obsproject.com/forum/resources/528/",
   "code": "#149\n@client.command(aliases=()) \nasync def ndi(ctx):\n  field3 = content_fields[149][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#150",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 150,
   "Command": "ndisdk",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "The NDI SDK can be found here: http://pages.newtek.com/NDI-Developers-SDK-Download-Link.html",
   "code": "#150\n@client.command(aliases=()) \nasync def ndisdk(ctx):\n  field3 = content_fields[150][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#151",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 151,
   "Command": "nditools",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "NDI Tools can be downloaded here:\nWindows\nWindows Analysis Tool\nMac",
   "code": "#151\n@client.command(aliases=()) \nasync def nditools(ctx):\n  field3 = content_fields[151][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#152",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 152,
   "Command": "new",
   "Aliases": "guide",
   "\", \"": "\", \"",
   "adding \", \"": "guide",
   "full function": "\"guide\"",
   "alias for code": "\"guide\"",
   "Text": "New to OBS? [Check out our 4 step quickstart guide.](https://obsproject.com/wiki/OBS-Studio-Quickstart)\nWant to learn even more? Check out our [in-depth overview.](https://obsproject.com/wiki/OBS-Studio-Overview)\nIf you'd prefer to learn with videos, check out these guides made by the community:\n[Nerd or Die's quickstart video guide](https://youtube.com/watch?v=5rlrDIwnGGQ&t=0s&list=PLT3Ure7_kYHwj8oT3AV-pZ4_r7yp6mDg-)\n[EposVox's OBS Master Class](https://youtube.com/watch?v=nK-Mu7nw5EA&list=PLzo7l8HTJNK-IKzM_zDicTd2u20Ab2pAl)",
   "code": "#152\n@client.command(aliases=(\"guide\")) \nasync def new(ctx):\n  field3 = content_fields[152][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#153",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 153,
   "Command": "newscenecollection",
   "Aliases": "newsc",
   "\", \"": "\", \"",
   "adding \", \"": "newsc",
   "full function": "\"newsc\"",
   "alias for code": "\"newsc\"",
   "Text": "Please create a new Scene Collection for testing purposes. Use the Scene Collection menu at the top of OBS, select New, and call it \"Testing\". Then, add your sources that are suspected to have issues.",
   "code": "#153\n@client.command(aliases=(\"newsc\")) \nasync def newscenecollection(ctx):\n  field3 = content_fields[153][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#154",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 154,
   "Command": "nginx",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Setting up your own nginx RTMP server (Linux-based guide): http://obsproject.com/forum/threads/12891/\nPre-built nginx Windows binaries: https://github.com/illuspas/nginx-rtmp-win32",
   "code": "#154\n@client.command(aliases=()) \nasync def nginx(ctx):\n  field3 = content_fields[154][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#155",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 155,
   "Command": "nightly",
   "Aliases": "macnightly",
   "\", \"": "\", \"",
   "adding \", \"": "macnightly",
   "full function": "\"macnightly\"",
   "alias for code": "\"macnightly\"",
   "Text": "Nightly builds are available for those who wish to test new features.\nNote that they may not be stable and are not digitally signed. The latter may cause game capture not to work with certain games or cause AV software to block some features.\nTo download the latest nightly build for Windows, [click here](https://obsbot.rodney.io/%nightly_url%)\nTo download the latest nightly build for macOS, [click here](https://obsbot.rodney.io/%mac_nightly_url%)",
   "code": "#155\n@client.command(aliases=(\"macnightly\")) \nasync def nightly(ctx):\n  field3 = content_fields[155][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#156",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 156,
   "Command": "nvafx",
   "Aliases": "afx",
   "\", \"": "\", \"",
   "adding \", \"": "afx",
   "full function": "\"afx\"",
   "alias for code": "\"afx\"",
   "Text": "The redistributables required for the NVIDIA Noise Removal filter can be found here: https://www.nvidia.com/en-us/geforce/broadcasting/broadcast-sdk/resources/\nOnce installed, the NVIDIA Noise Removal option will appear as part of the \"Noise Suppression\" filter, alongside RNNoise and Speex.",
   "code": "#156\n@client.command(aliases=(\"afx\")) \nasync def nvafx(ctx):\n  field3 = content_fields[156][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#157",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 157,
   "Command": "oc",
   "Aliases": "opencollective",
   "\", \"": "\", \"",
   "adding \", \"": "opencollective",
   "full function": "\"opencollective\"",
   "alias for code": "\"opencollective\"",
   "Text": "You can sponsor OBS development through Open Collective, a platform for funding groups will full transparency: https://opencollective.com/obsproject",
   "code": "#157\n@client.command(aliases=(\"opencollective\")) \nasync def oc(ctx):\n  field3 = content_fields[157][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#158",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 158,
   "Command": "opengl",
   "Aliases": "glxinfo",
   "\", \"": "\", \"",
   "adding \", \"": "glxinfo",
   "full function": "\"glxinfo\"",
   "alias for code": "\"glxinfo\"",
   "Text": "Please type 'glxinfo | grep OpenGL' into your terminal, upload the output to a site like http://pastebin.com/ and then link it here.",
   "code": "#158\n@client.command(aliases=(\"glxinfo\")) \nasync def opengl(ctx):\n  field3 = content_fields[158][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#159",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 159,
   "Command": "params",
   "Aliases": "parameters, launchoptions",
   "\", \"": "\", \"",
   "adding \", \"": "parameters\", \"launchoptions",
   "full function": "\"parameters\", \"launchoptions\"",
   "alias for code": "\"parameters\", \"launchoptions\"",
   "Text": "For a list of launch parameters, see: https://obsproject.com/wiki/Launch-Parameters",
   "code": "#159\n@client.command(aliases=(\"parameters\", \"launchoptions\")) \nasync def params(ctx):\n  field3 = content_fields[159][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#160",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 160,
   "Command": "partial",
   "Aliases": "full",
   "\", \"": "\", \"",
   "adding \", \"": "full",
   "full function": "\"full\"",
   "alias for code": "\"full\"",
   "Text": "Most video editing applications and video streaming platforms expect a Partial-range input; streaming or recording in Full range will result in color clipping, often reported as overly bright or dark image. You can change your color range setting in Settings > Advanced.",
   "code": "#160\n@client.command(aliases=(\"full\")) \nasync def partial(ctx):\n  field3 = content_fields[160][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#161",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 161,
   "Command": "patreon",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "OBS is on Patreon! Support Jim, the project's lead developer, as he works full time on OBS: https://www.patreon.com/obsproject",
   "code": "#161\n@client.command(aliases=()) \nasync def patreon(ctx):\n  field3 = content_fields[161][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "#161\n@client.command(aliases=()) \nasync def patreon(ctx):\n  field3 = content_fields[161][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#162\n@client.command(aliases=()) \nasync def pause(ctx):\n  field3 = content_fields[162][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#163\n@client.command(aliases=()) \nasync def periscope(ctx):\n  field3 = content_fields[163][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#164\n@client.command(aliases=(\"fenrir\", \"pong\")) \nasync def ping(ctx):\n  field3 = content_fields[164][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#165\n@client.command(aliases=()) \nasync def plugins(ctx):\n  field3 = content_fields[165][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#166\n@client.command(aliases=()) \nasync def plugintemplate(ctx):\n  field3 = content_fields[166][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#167\n@client.command(aliases=(\"portablemode\")) \nasync def portable(ctx):\n  field3 = content_fields[167][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#168\n@client.command(aliases=()) \nasync def portablevc(ctx):\n  field3 = content_fields[168][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#169\n@client.command(aliases=()) \nasync def pride(ctx):\n  field3 = content_fields[169][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#170\n@client.command(aliases=()) \nasync def programcapture(ctx):\n  field3 = content_fields[170][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#171\n@client.command(aliases=()) \nasync def protectedfolders(ctx):\n  field3 = content_fields[171][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#172\n@client.command(aliases=()) \nasync def quality(ctx):\n  field3 = content_fields[172][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#173\n@client.command(aliases=(\"qsv\")) \nasync def quicksync(ctx):\n  field3 = content_fields[173][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#174\n@client.command(aliases=()) \nasync def r6(ctx):\n  field3 = content_fields[174][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#175\n@client.command(aliases=(\"beta\", \"nvencbeta\")) \nasync def rc(ctx):\n  field3 = content_fields[175][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#176\n@client.command(aliases=(\"files\")) \nasync def recordings(ctx):\n  field3 = content_fields[176][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#177\n@client.command(aliases=()) \nasync def recursion(ctx):\n  field3 = content_fields[177][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#178\n@client.command(aliases=(\"mixedrefresh\")) \nasync def refresh(ctx):\n  field3 = content_fields[178][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#179\n@client.command(aliases=()) \nasync def remote(ctx):\n  field3 = content_fields[179][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#180\n@client.command(aliases=()) \nasync def remotedebugging(ctx):\n  field3 = content_fields[180][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#181\n@client.command(aliases=()) \nasync def remux(ctx):\n  field3 = content_fields[181][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#182\n@client.command(aliases=()) \nasync def replaybuffer(ctx):\n  field3 = content_fields[182][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#183\n@client.command(aliases=(\"reqs\")) \nasync def requirements(ctx):\n  field3 = content_fields[183][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#184\n@client.command(aliases=()) \nasync def savage(ctx):\n  field3 = content_fields[184][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#185\n@client.command(aliases=()) \nasync def sceneswitcher(ctx):\n  field3 = content_fields[185][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#186\n@client.command(aliases=()) \nasync def screenshot(ctx):\n  field3 = content_fields[186][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#187\n@client.command(aliases=()) \nasync def scripting(ctx):\n  field3 = content_fields[187][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#188\n@client.command(aliases=()) \nasync def scripts(ctx):\n  field3 = content_fields[188][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#189\n@client.command(aliases=()) \nasync def se(ctx):\n  field3 = content_fields[189][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#190\n@client.command(aliases=()) \nasync def sehelp(ctx):\n  field3 = content_fields[190][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#191\n@client.command(aliases=()) \nasync def settings(ctx):\n  field3 = content_fields[191][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#192\n@client.command(aliases=()) \nasync def shortcuts(ctx):\n  field3 = content_fields[192][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "copied code": "#161\n@client.command(aliases=()) \nasync def patreon(ctx):\n  field3 = content_fields[161][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#162\n@client.command(aliases=()) \nasync def pause(ctx):\n  field3 = content_fields[162][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#163\n@client.command(aliases=()) \nasync def periscope(ctx):\n  field3 = content_fields[163][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#164\n@client.command(aliases=(\"fenrir\", \"pong\")) \nasync def ping(ctx):\n  field3 = content_fields[164][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#165\n@client.command(aliases=()) \nasync def plugins(ctx):\n  field3 = content_fields[165][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#166\n@client.command(aliases=()) \nasync def plugintemplate(ctx):\n  field3 = content_fields[166][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#167\n@client.command(aliases=(\"portablemode\")) \nasync def portable(ctx):\n  field3 = content_fields[167][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#168\n@client.command(aliases=()) \nasync def portablevc(ctx):\n  field3 = content_fields[168][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#169\n@client.command(aliases=()) \nasync def pride(ctx):\n  field3 = content_fields[169][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#170\n@client.command(aliases=()) \nasync def programcapture(ctx):\n  field3 = content_fields[170][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#171\n@client.command(aliases=()) \nasync def protectedfolders(ctx):\n  field3 = content_fields[171][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#172\n@client.command(aliases=()) \nasync def quality(ctx):\n  field3 = content_fields[172][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#173\n@client.command(aliases=(\"qsv\")) \nasync def quicksync(ctx):\n  field3 = content_fields[173][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#174\n@client.command(aliases=()) \nasync def r6(ctx):\n  field3 = content_fields[174][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#175\n@client.command(aliases=(\"beta\", \"nvencbeta\")) \nasync def rc(ctx):\n  field3 = content_fields[175][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#176\n@client.command(aliases=(\"files\")) \nasync def recordings(ctx):\n  field3 = content_fields[176][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#177\n@client.command(aliases=()) \nasync def recursion(ctx):\n  field3 = content_fields[177][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#178\n@client.command(aliases=(\"mixedrefresh\")) \nasync def refresh(ctx):\n  field3 = content_fields[178][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#179\n@client.command(aliases=()) \nasync def remote(ctx):\n  field3 = content_fields[179][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#180\n@client.command(aliases=()) \nasync def remotedebugging(ctx):\n  field3 = content_fields[180][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#181\n@client.command(aliases=()) \nasync def remux(ctx):\n  field3 = content_fields[181][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#182\n@client.command(aliases=()) \nasync def replaybuffer(ctx):\n  field3 = content_fields[182][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#183\n@client.command(aliases=(\"reqs\")) \nasync def requirements(ctx):\n  field3 = content_fields[183][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#184\n@client.command(aliases=()) \nasync def savage(ctx):\n  field3 = content_fields[184][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#185\n@client.command(aliases=()) \nasync def sceneswitcher(ctx):\n  field3 = content_fields[185][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#186\n@client.command(aliases=()) \nasync def screenshot(ctx):\n  field3 = content_fields[186][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#187\n@client.command(aliases=()) \nasync def scripting(ctx):\n  field3 = content_fields[187][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#188\n@client.command(aliases=()) \nasync def scripts(ctx):\n  field3 = content_fields[188][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#189\n@client.command(aliases=()) \nasync def se(ctx):\n  field3 = content_fields[189][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#190\n@client.command(aliases=()) \nasync def sehelp(ctx):\n  field3 = content_fields[190][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#191\n@client.command(aliases=()) \nasync def settings(ctx):\n  field3 = content_fields[191][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#192\n@client.command(aliases=()) \nasync def shortcuts(ctx):\n  field3 = content_fields[192][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "FIELD17": ""
 },
 {
   "#": "#162",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 162,
   "Command": "pause",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "To enable \"Pause Recordings\", do the following:\nIn Settings -> Output, make sure \"Recording quality\" is not set to \"Same as stream\". If you are using advanced output, make sure that the encoder is not set to \"(Use stream encoder)\".\nIf you want, set a Pause hotkey in Settings -> Hotkeys\nStart Recording. While recording, you should see a ⏸ icon next to the Stop Recording button.",
   "code": "#162\n@client.command(aliases=()) \nasync def pause(ctx):\n  field3 = content_fields[162][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#163",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 163,
   "Command": "periscope",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "The community has created a guide for streaming to Periscope with OBS: https://obsproject.com/forum/resources/508/",
   "code": "#163\n@client.command(aliases=()) \nasync def periscope(ctx):\n  field3 = content_fields[163][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#164",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 164,
   "Command": "ping",
   "Aliases": "fenrir, pong",
   "\", \"": "\", \"",
   "adding \", \"": "fenrir\", \"pong",
   "full function": "\"fenrir\", \"pong\"",
   "alias for code": "\"fenrir\", \"pong\"",
   "Text": "Butt sandwiches!",
   "code": "#164\n@client.command(aliases=(\"fenrir\", \"pong\")) \nasync def ping(ctx):\n  field3 = content_fields[164][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#165",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 165,
   "Command": "plugins",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "How to install plugins: https://obsproject.com/forum/resources/421/\nList of available plugins: https://obsproject.com/forum/resources/categories/6/",
   "code": "#165\n@client.command(aliases=()) \nasync def plugins(ctx):\n  field3 = content_fields[165][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#166",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 166,
   "Command": "plugintemplate",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "A template for new OBS plugins including boilerplate code and CI scripts can be found at https://github.com/obsproject/obs-plugintemplate",
   "code": "#166\n@client.command(aliases=()) \nasync def plugintemplate(ctx):\n  field3 = content_fields[166][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#167",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 167,
   "Command": "portable",
   "Aliases": "portablemode",
   "\", \"": "\", \"",
   "adding \", \"": "portablemode",
   "full function": "\"portablemode\"",
   "alias for code": "\"portablemode\"",
   "Text": "Portable Mode allows the program to save and access configuration data from the program's base folder. To enable portable mode:\n1.) Install/unzip to a custom directory outside of \"C:\\Program Files (x86)\" or \"C:\\Program Files\"\n2.) Then either modify its shortcut with the --portable or -p command line parameter, or create a blank text file named \"portable_mode.txt\" in the base installation/unzip folder.",
   "code": "#167\n@client.command(aliases=(\"portablemode\")) \nasync def portable(ctx):\n  field3 = content_fields[167][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#168",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 168,
   "Command": "portablevc",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "To install the OBS virtual camera when running OBS in portable mode, navigate to your <your obs-studio folder>\\data\\obs-plugins\\win-dshow and run virtualcam-install.bat as Administrator.",
   "code": "#168\n@client.command(aliases=()) \nasync def portablevc(ctx):\n  field3 = content_fields[168][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#169",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 169,
   "Command": "pride",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Wondering what the logo on the Alpha Gaming server is? It's the LGBTQ+ Pride flag, showing our support for Pride Month! For more information, [click here](https://www.loc.gov/lgbt-pride-month/about/)",
   "code": "#169\n@client.command(aliases=()) \nasync def pride(ctx):\n  field3 = content_fields[169][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#170",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 170,
   "Command": "programcapture",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Unfortunately, it is impossible to capture only a single program's audio in Windows due to limitations of the Windows API. Windows only makes it possible to capture all audio from a specific device. Instead, try creating a virtual audio device using something like Virtual Audio Cable or Voicemeeter Banana, and set your programs to output to that device.",
   "code": "#170\n@client.command(aliases=()) \nasync def programcapture(ctx):\n  field3 = content_fields[170][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#171",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 171,
   "Command": "protectedfolders",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "The Windows Controlled Folder Access setting can prevent OBS from being able to record to your PC. It is recommended that you disable it.\nClick on start and search for Windows Defender Security Center\nClick on Virus & threat protection\nClick the Virus & threat protection settings option\nTurn off the Controlled folder access toggle switch",
   "code": "#171\n@client.command(aliases=()) \nasync def protectedfolders(ctx):\n  field3 = content_fields[171][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#172",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 172,
   "Command": "quality",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Interested in learning more about how video compression and streaming/recording quality work? Watch http://www.youtube.com/watch?v=r6Rp-uo6HmI",
   "code": "#172\n@client.command(aliases=()) \nasync def quality(ctx):\n  field3 = content_fields[172][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#173",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 173,
   "Command": "quicksync",
   "Aliases": "qsv",
   "\", \"": "\", \"",
   "adding \", \"": "qsv",
   "full function": "\"qsv\"",
   "alias for code": "\"qsv\"",
   "Text": "If the Quick Sync option in OBS is unavailable, read http://obsproject.com/forum/resources/82/\nNote that hardware encoders like Quick Sync will produce lower quality compared to x264 at the same bitrate, and are best suited for local recordings rather than streaming.",
   "code": "#173\n@client.command(aliases=(\"qsv\")) \nasync def quicksync(ctx):\n  field3 = content_fields[173][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#174",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 174,
   "Command": "r6",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Rainbow Six: Siege Vulkan can now be captured with OBS 25 RC5 or higher. Keep in mind that OBS might need to run as administrator to capture the game successfully.",
   "code": "#174\n@client.command(aliases=()) \nasync def r6(ctx):\n  field3 = content_fields[174][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#175",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 175,
   "Command": "rc",
   "Aliases": "beta, nvencbeta",
   "\", \"": "\", \"",
   "adding \", \"": "beta\", \"nvencbeta",
   "full function": "\"beta\", \"nvencbeta\"",
   "alias for code": "\"beta\", \"nvencbeta\"",
   "Text": "Details about the latest OBS Studio 27 release candidate can be found here: https://obsproject.com/forum/threads/obs-studio-27-release-candidate.141857/",
   "code": "#175\n@client.command(aliases=(\"beta\", \"nvencbeta\")) \nasync def rc(ctx):\n  field3 = content_fields[175][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#176",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 176,
   "Command": "recordings",
   "Aliases": "files",
   "\", \"": "\", \"",
   "adding \", \"": "files",
   "full function": "\"files\"",
   "alias for code": "\"files\"",
   "Text": "OBS Studio recordings can be found by selecting File > Show Recordings. The output path can be changed under Settings > Output.",
   "code": "#176\n@client.command(aliases=(\"files\")) \nasync def recordings(ctx):\n  field3 = content_fields[176][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#177",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 177,
   "Command": "recursion",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "!recursion",
   "code": "#177\n@client.command(aliases=()) \nasync def recursion(ctx):\n  field3 = content_fields[177][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#178",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 178,
   "Command": "refresh",
   "Aliases": "mixedrefresh",
   "\", \"": "\", \"",
   "adding \", \"": "mixedrefresh",
   "full function": "\"mixedrefresh\"",
   "alias for code": "\"mixedrefresh\"",
   "Text": "Due to Windows' limitations, using multiple displays with different refresh rates will cause performance issues in hardware-accelerated applications, including OBS. You can fix this by setting all displays to the same refresh rate. An easier solution may be to simply use monitors that all have the same refresh rate.\nThis problem is fixed in the Windows 10 May 2020 Update, which has started rolling out to users as of May 27, 2020.",
   "code": "#178\n@client.command(aliases=(\"mixedrefresh\")) \nasync def refresh(ctx):\n  field3 = content_fields[178][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#179",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 179,
   "Command": "remote",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "If you'd like to control OBS Studio remotely, you have a few options.\nTo control from the web on any device (including phones and computers), use OBS Tablet Remote (requires obs-websocket).\nIf you'd prefer a mobile app that works like the Elgato Streamdeck, you can try Touch Portal, UP Deck, or Deckboard.",
   "code": "#179\n@client.command(aliases=()) \nasync def remote(ctx):\n  field3 = content_fields[179][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#180",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 180,
   "Command": "remotedebugging",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "To expose Chrome Dev Tools for your browser sources, add --remote-debugging-port=1234 to your OBS Studio shortcut (where 1234 is your preferred port number) and navigate to http://localhost:1234/ in Chrome to connect to the session",
   "code": "#180\n@client.command(aliases=()) \nasync def remotedebugging(ctx):\n  field3 = content_fields[180][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#181",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 181,
   "Command": "remux",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Remuxing allows you to take one video container (FLV, MKV, etc) and make an exact copy of the video and audio in another video container. This process takes seconds, and can be done with any recordings made with OBS by selecting File > Remux Recordings.\nRemuxing is the safest way to get MP4 files for use in editors, or other software which doesn't support FLV or MKV files.",
   "code": "#181\n@client.command(aliases=()) \nasync def remux(ctx):\n  field3 = content_fields[181][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#182",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 182,
   "Command": "replaybuffer",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "The replay buffer is a feature that allows you to keep a rolling buffer of OBS' output for a set amount of time (known as \"flashback recording\"), which can be saved to disk as a recorded video when a hotkey is pressed. You can enable it via Settings -> Output.",
   "code": "#182\n@client.command(aliases=()) \nasync def replaybuffer(ctx):\n  field3 = content_fields[182][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#183",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 183,
   "Command": "requirements",
   "Aliases": "reqs",
   "\", \"": "\", \"",
   "adding \", \"": "reqs",
   "full function": "\"reqs\"",
   "alias for code": "\"reqs\"",
   "Text": "OBS Studio requires a DirectX 10.1 (Windows) or OpenGL 3.3 (Mac, Linux) compatible video card (GPU).\nThe CPU requirements vary considerably depending on the chosen encoder, resolution, FPS and your scene complexity.\nTry the Auto Configuration Wizard to find appropriate settings for your specs. See: https://obsproject.com/wiki/System-Requirements",
   "code": "#183\n@client.command(aliases=(\"reqs\")) \nasync def requirements(ctx):\n  field3 = content_fields[183][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#184",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 184,
   "Command": "savage",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "I reject your reality and substitute my own!",
   "code": "#184\n@client.command(aliases=()) \nasync def savage(ctx):\n  field3 = content_fields[184][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#185",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 185,
   "Command": "sceneswitcher",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "An advanced scene switcher plugin, with options for timed switching, cursor detecting, and further automation options, is available for OBS Studio on Windows, macOS, and Linux. Download links and installation instructions can be found here: http://obsproject.com/forum/resources/395/",
   "code": "#185\n@client.command(aliases=()) \nasync def sceneswitcher(ctx):\n  field3 = content_fields[185][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#186",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 186,
   "Command": "screenshot",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "How to take a screenshot - http://www.take-a-screenshot.org/",
   "code": "#186\n@client.command(aliases=()) \nasync def screenshot(ctx):\n  field3 = content_fields[186][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#187",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 187,
   "Command": "scripting",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "A guide for getting started with development for scripting in OBS can be found on the wiki.\nAdditionally, you can find documentation for the scripting API here.",
   "code": "#187\n@client.command(aliases=()) \nasync def scripting(ctx):\n  field3 = content_fields[187][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#188",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 188,
   "Command": "scripts",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Scripts for OBS can be found here: https://obsproject.com/forum/resources/categories/5/",
   "code": "#188\n@client.command(aliases=()) \nasync def scripts(ctx):\n  field3 = content_fields[188][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#189",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 189,
   "Command": "se",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "To cleanly remove the OBS.live plugin:\nUninstall OBS.Live\nUninstall OBS Studio (make sure that \"User Settings\" is not selected)\nInstall OBS Studio again from https://obsproject.com/\nYour settings will be saved unless you have selected to delete them during removal.",
   "code": "#189\n@client.command(aliases=()) \nasync def se(ctx):\n  field3 = content_fields[189][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#190",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 190,
   "Command": "sehelp",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "If you need advanced help with StreamElements plugins or services, please join their [Discord server](https://discordapp.com/invite/se) or submit a [support ticket.](https://support.streamelements.com/hc/en-us/requests/new)",
   "code": "#190\n@client.command(aliases=()) \nasync def sehelp(ctx):\n  field3 = content_fields[190][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#191",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 191,
   "Command": "settings",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "OBS Studio's settings can be found in the following OS specific locations:\nWindows: WinKey+R > %APPDATA%\\obs-studio\nmacOS: Cmd+Shift+G > ~/Library/Application Support/obs-studio\nLinux: ~/.config/obs-studio",
   "code": "#191\n@client.command(aliases=()) \nasync def settings(ctx):\n  field3 = content_fields[191][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#192",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 192,
   "Command": "shortcuts",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "A list of the pre-defined shortcuts in OBS can be found here: [Keyboard Shortcuts List](https://obsproject.com/wiki/Keyboard-Shortcuts)",
   "code": "#192\n@client.command(aliases=()) \nasync def shortcuts(ctx):\n  field3 = content_fields[192][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#193",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 193,
   "Command": "sidechain",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Sidechain compression (ducking) is available by using the Compressor filter on your audio sources. For a video guide, see: https://www.youtube.com/watch?v=1Te2JERlInQ",
   "code": "#193\n@client.command(aliases=()) \nasync def sidechain(ctx):\n  field3 = content_fields[193][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "#193\n@client.command(aliases=()) \nasync def sidechain(ctx):\n  field3 = content_fields[193][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#194\n@client.command(aliases=()) \nasync def simple(ctx):\n  field3 = content_fields[194][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#195\n@client.command(aliases=()) \nasync def skype(ctx):\n  field3 = content_fields[195][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#196\n@client.command(aliases=()) \nasync def sl(ctx):\n  field3 = content_fields[196][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#197\n@client.command(aliases=()) \nasync def software(ctx):\n  field3 = content_fields[197][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#198\n@client.command(aliases=()) \nasync def sources(ctx):\n  field3 = content_fields[198][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#199\n@client.command(aliases=()) \nasync def speedtest(ctx):\n  field3 = content_fields[199][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#200\n@client.command(aliases=()) \nasync def srt(ctx):\n  field3 = content_fields[200][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#201\n@client.command(aliases=(\"cookie\", \"cookies\")) \nasync def stalecookie(ctx):\n  field3 = content_fields[201][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#202\n@client.command(aliases=()) \nasync def streamfx(ctx):\n  field3 = content_fields[202][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#203\n@client.command(aliases=(\"twitch\")) \nasync def streamkey(ctx):\n  field3 = content_fields[203][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#204\n@client.command(aliases=()) \nasync def streamreport(ctx):\n  field3 = content_fields[204][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#205\n@client.command(aliases=(\"studiomode\")) \nasync def studio(ctx):\n  field3 = content_fields[205][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#206\n@client.command(aliases=(\"halp\", \"help\")) \nasync def support(ctx):\n  field3 = content_fields[206][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#207\n@client.command(aliases=()) \nasync def syphon(ctx):\n  field3 = content_fields[207][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#208\n@client.command(aliases=()) \nasync def testembeds(ctx):\n  field3 = content_fields[208][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#209\n@client.command(aliases=(\"theming\", \"customthemes\")) \nasync def themes(ctx):\n  field3 = content_fields[209][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#210\n@client.command(aliases=()) \nasync def thiscommanddoesnotexist(ctx):\n  field3 = content_fields[210][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#211\n@client.command(aliases=()) \nasync def timestamps(ctx):\n  field3 = content_fields[211][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#212\n@client.command(aliases=()) \nasync def trackmatte(ctx):\n  field3 = content_fields[212][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#213\n@client.command(aliases=(\"tbr\")) \nasync def twitchbitrate(ctx):\n  field3 = content_fields[213][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#214\n@client.command(aliases=(\"twitchcookies\")) \nasync def twitchcookie(ctx):\n  field3 = content_fields[214][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#215\n@client.command(aliases=(\"soundtrack\")) \nasync def twitchsoundtrack(ctx):\n  field3 = content_fields[215][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#216\n@client.command(aliases=(\"jtvping\")) \nasync def twitchtest(ctx):\n  field3 = content_fields[216][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#217\n@client.command(aliases=(\"2fa\")) \nasync def twofactor(ctx):\n  field3 = content_fields[217][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#218\n@client.command(aliases=()) \nasync def update(ctx):\n  field3 = content_fields[218][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#219\n@client.command(aliases=(\"usbview\")) \nasync def usb(ctx):\n  field3 = content_fields[219][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#220\n@client.command(aliases=()) \nasync def uvc(ctx):\n  field3 = content_fields[220][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#221\n@client.command(aliases=()) \nasync def uwp(ctx):\n  field3 = content_fields[221][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#222\n@client.command(aliases=(\"voicemeeter\")) \nasync def vac(ctx):\n  field3 = content_fields[222][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#223\n@client.command(aliases=(\"vbcable\", \"cable\")) \nasync def vcamaudio(ctx):\n  field3 = content_fields[223][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#224\n@client.command(aliases=(\"vcamname\")) \nasync def vcamrename(ctx):\n  field3 = content_fields[224][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "copied code": "#193\n@client.command(aliases=()) \nasync def sidechain(ctx):\n  field3 = content_fields[193][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#194\n@client.command(aliases=()) \nasync def simple(ctx):\n  field3 = content_fields[194][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#195\n@client.command(aliases=()) \nasync def skype(ctx):\n  field3 = content_fields[195][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#196\n@client.command(aliases=()) \nasync def sl(ctx):\n  field3 = content_fields[196][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#197\n@client.command(aliases=()) \nasync def software(ctx):\n  field3 = content_fields[197][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#198\n@client.command(aliases=()) \nasync def sources(ctx):\n  field3 = content_fields[198][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#199\n@client.command(aliases=()) \nasync def speedtest(ctx):\n  field3 = content_fields[199][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#200\n@client.command(aliases=()) \nasync def srt(ctx):\n  field3 = content_fields[200][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#201\n@client.command(aliases=(\"cookie\", \"cookies\")) \nasync def stalecookie(ctx):\n  field3 = content_fields[201][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#202\n@client.command(aliases=()) \nasync def streamfx(ctx):\n  field3 = content_fields[202][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#203\n@client.command(aliases=(\"twitch\")) \nasync def streamkey(ctx):\n  field3 = content_fields[203][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#204\n@client.command(aliases=()) \nasync def streamreport(ctx):\n  field3 = content_fields[204][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#205\n@client.command(aliases=(\"studiomode\")) \nasync def studio(ctx):\n  field3 = content_fields[205][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#206\n@client.command(aliases=(\"halp\", \"help\")) \nasync def support(ctx):\n  field3 = content_fields[206][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#207\n@client.command(aliases=()) \nasync def syphon(ctx):\n  field3 = content_fields[207][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#208\n@client.command(aliases=()) \nasync def testembeds(ctx):\n  field3 = content_fields[208][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#209\n@client.command(aliases=(\"theming\", \"customthemes\")) \nasync def themes(ctx):\n  field3 = content_fields[209][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#210\n@client.command(aliases=()) \nasync def thiscommanddoesnotexist(ctx):\n  field3 = content_fields[210][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#211\n@client.command(aliases=()) \nasync def timestamps(ctx):\n  field3 = content_fields[211][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#212\n@client.command(aliases=()) \nasync def trackmatte(ctx):\n  field3 = content_fields[212][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#213\n@client.command(aliases=(\"tbr\")) \nasync def twitchbitrate(ctx):\n  field3 = content_fields[213][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#214\n@client.command(aliases=(\"twitchcookies\")) \nasync def twitchcookie(ctx):\n  field3 = content_fields[214][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#215\n@client.command(aliases=(\"soundtrack\")) \nasync def twitchsoundtrack(ctx):\n  field3 = content_fields[215][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#216\n@client.command(aliases=(\"jtvping\")) \nasync def twitchtest(ctx):\n  field3 = content_fields[216][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#217\n@client.command(aliases=(\"2fa\")) \nasync def twofactor(ctx):\n  field3 = content_fields[217][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#218\n@client.command(aliases=()) \nasync def update(ctx):\n  field3 = content_fields[218][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#219\n@client.command(aliases=(\"usbview\")) \nasync def usb(ctx):\n  field3 = content_fields[219][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#220\n@client.command(aliases=()) \nasync def uvc(ctx):\n  field3 = content_fields[220][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#221\n@client.command(aliases=()) \nasync def uwp(ctx):\n  field3 = content_fields[221][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#222\n@client.command(aliases=(\"voicemeeter\")) \nasync def vac(ctx):\n  field3 = content_fields[222][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#223\n@client.command(aliases=(\"vbcable\", \"cable\")) \nasync def vcamaudio(ctx):\n  field3 = content_fields[223][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#224\n@client.command(aliases=(\"vcamname\")) \nasync def vcamrename(ctx):\n  field3 = content_fields[224][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "FIELD17": ""
 },
 {
   "#": "#194",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 194,
   "Command": "simple",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Advanced output mode, while allowing for more fine-tuning of options, does not automatically mean that your stream or recording will have better quality. Often, it can result in lower quality, because it can allow changes to settings that really shouldn't be changed. In most cases, Simple output mode is the best option to get the most out of OBS.\nTo change back to Simple output mode:\n1) Go to Settings > Output in OBS.\n2) Change \"Output Mode\" from \"Advanced\" to \"Simple\".",
   "code": "#194\n@client.command(aliases=()) \nasync def simple(ctx):\n  field3 = content_fields[194][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#195",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 195,
   "Command": "skype",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "The recommended way to capture a Skype call is using NDI. Guide: https://www.youtube.com/watch?v=SmmHln-2kZw\n(Note: this does not work with 'Skype for Windows 10', only 'Skype for Windows', which also works on Windows 10)\nAs part of OBS Studio 25, you can now Window Capture Skype without disabling hardware acceleration.\nRequirements:\nWindows 10 Version 1903 or newer (open winver.exe to check)\nWindow Capture \"Capture Method\": \"Windows Graphics Capture\"",
   "code": "#195\n@client.command(aliases=()) \nasync def skype(ctx):\n  field3 = content_fields[195][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#196",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 196,
   "Command": "sl",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "If you need advanced help with StreamLabs app or services, please join their [Discord server](https://discord.gg/xFcsxft) or submit a [support ticket.](https://support.streamlabs.com/hc/en-us/requests/new)",
   "code": "#196\n@client.command(aliases=()) \nasync def sl(ctx):\n  field3 = content_fields[196][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#197",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 197,
   "Command": "software",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "List of software for streaming and recording: https://helping-squad.com/useful-links/\nList of software for editing: http://obsproject.com/forum/resources/234/",
   "code": "#197\n@client.command(aliases=()) \nasync def software(ctx):\n  field3 = content_fields[197][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#198",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 198,
   "Command": "sources",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "For a guide on the various sources and how they work in OBS Studio, see our guide here: https://obsproject.com/wiki/Sources-Guide",
   "code": "#198\n@client.command(aliases=()) \nasync def sources(ctx):\n  field3 = content_fields[198][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#199",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 199,
   "Command": "speedtest",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Speed tests mean very little with regards to streaming and your choice of bitrate. They measure your raw upload speed to a server that's near you (likely run by your local ISP), instead of your stable upload speed to a streaming server. Your stable speed will determine the bitrate you can comfortably stream at.\nThe stable speed can be estimated as roughly 70-75% of the speed test result in a lot of cases, however this is by no means a perfect estimate. In reality, it may end up being much worse if there's problems between your ISP and the streaming service.",
   "code": "#199\n@client.command(aliases=()) \nasync def speedtest(ctx):\n  field3 = content_fields[199][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#200",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 200,
   "Command": "srt",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "SRT is a streaming protocol, like RTMP: https://en.wikipedia.org/wiki/Secure_Reliable_Transport. In OBS Studio 25.0 and later, you can output via SRT to appropriate servers by going to Stream settings and selecting \"Custom\" for your service, then entering your srt:// path into the Server box. For a more complete guide on SRT and how to use it with OBS, see this article: https://obsproject.com/wiki/Streaming-With-SRT-Protocol",
   "code": "#200\n@client.command(aliases=()) \nasync def srt(ctx):\n  field3 = content_fields[200][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#201",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 201,
   "Command": "stalecookie",
   "Aliases": "cookie, cookies",
   "\", \"": "\", \"",
   "adding \", \"": "cookie\", \"cookies",
   "full function": "\"cookie\", \"cookies\"",
   "alias for code": "\"cookie\", \"cookies\"",
   "Text": "Exit OBS (make sure OBS is not running)\nDelete the folder %appdata%\\obs-studio\\plugin_config\\obs-browser\\obs_profile_cookies\nStart OBS\nSettings -> Stream -> disconnect -> connect",
   "code": "#201\n@client.command(aliases=(\"cookie\", \"cookies\")) \nasync def stalecookie(ctx):\n  field3 = content_fields[201][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#202",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 202,
   "Command": "streamfx",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "If you are looking for more information or support for the StreamFX plugin, please visit the [forum resource page.](https://obsproject.com/forum/resources/streamfx-for-obs%C2%AE-studio.578/)",
   "code": "#202\n@client.command(aliases=()) \nasync def streamfx(ctx):\n  field3 = content_fields[202][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#203",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 203,
   "Command": "streamkey",
   "Aliases": "twitch",
   "\", \"": "\", \"",
   "adding \", \"": "twitch",
   "full function": "\"twitch\"",
   "alias for code": "\"twitch\"",
   "Text": "A stream key is a unique string that is used to identify your account to a streaming service. You can usually find it in your profile settings for the service you're looking to stream to. Make sure not to share it with anyone! Twitch's stream key can be found in your dashboard, here: https://dashboard.twitch.tv/settings/stream",
   "code": "#203\n@client.command(aliases=(\"twitch\")) \nasync def streamkey(ctx):\n  field3 = content_fields[203][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#204",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 204,
   "Command": "streamreport",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Interested to learn more about streaming settings, bitrates, encoder presets, and how they affect the quality of your stream? Check out a detailed report here: https://streamquality.report/docs/report.html",
   "code": "#204\n@client.command(aliases=()) \nasync def streamreport(ctx):\n  field3 = content_fields[204][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#205",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 205,
   "Command": "studio",
   "Aliases": "studiomode",
   "\", \"": "\", \"",
   "adding \", \"": "studiomode",
   "full function": "\"studiomode\"",
   "alias for code": "\"studiomode\"",
   "Text": "An overview of OBS Studio's Studio Mode can be found here: https://obsproject.com/wiki/OBS-Studio-Overview#studio-mode",
   "code": "#205\n@client.command(aliases=(\"studiomode\")) \nasync def studio(ctx):\n  field3 = content_fields[205][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#206",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 206,
   "Command": "support",
   "Aliases": "halp, help",
   "\", \"": "\", \"",
   "adding \", \"": "halp\", \"help",
   "full function": "\"halp\", \"help\"",
   "alias for code": "\"halp\", \"help\"",
   "Text": "Please use one of the Get Help channels for help, if you are unsure of which catagory to ask in, ask in <#473309543858962433> first!",
   "code": "#206\n@client.command(aliases=(\"halp\", \"help\")) \nasync def support(ctx):\n  field3 = content_fields[206][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#207",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 207,
   "Command": "syphon",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Quick instructions on how to use Syphon capture for games on macOS: https://gist.github.com/Fenrirthviti/ff3d52245046e831f0f2983bcf4c54db",
   "code": "#207\n@client.command(aliases=()) \nasync def syphon(ctx):\n  field3 = content_fields[207][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#208",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 208,
   "Command": "testembeds",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": null,
   "code": "#208\n@client.command(aliases=()) \nasync def testembeds(ctx):\n  field3 = content_fields[208][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#209",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 209,
   "Command": "themes",
   "Aliases": "theming, customthemes",
   "\", \"": "\", \"",
   "adding \", \"": "theming\", \"customthemes",
   "full function": "\"theming\", \"customthemes\"",
   "alias for code": "\"theming\", \"customthemes\"",
   "Text": "OBS Studio supports custom themes!\nDownload user made themes: https://obsproject.com/forum/resources/categories/10/\nLearn to make your own themes and where to install themes: https://obsproject.com/wiki/Custom-Themes",
   "code": "#209\n@client.command(aliases=(\"theming\", \"customthemes\")) \nasync def themes(ctx):\n  field3 = content_fields[209][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#210",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 210,
   "Command": "thiscommanddoesnotexist",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "this command does not exist",
   "code": "#210\n@client.command(aliases=()) \nasync def thiscommanddoesnotexist(ctx):\n  field3 = content_fields[210][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#211",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 211,
   "Command": "timestamps",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Some audio devices do not send proper timestamps, and can cause various issues, such as audio desync. Try disabling the device timestamps in OBS by clicking the Gear icon next to your audio source, select Properties, and then uncheck \"Use device timestamps.\"",
   "code": "#211\n@client.command(aliases=()) \nasync def timestamps(ctx):\n  field3 = content_fields[211][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#212",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 212,
   "Command": "trackmatte",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "For more information on how to create and use track matte stinger transitions, read our guide on the [wiki](https://obsproject.com/wiki/Getting-Started-With-Track-Matte-Stinger-Transitions).",
   "code": "#212\n@client.command(aliases=()) \nasync def trackmatte(ctx):\n  field3 = content_fields[212][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#213",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 213,
   "Command": "twitchbitrate",
   "Aliases": "tbr",
   "\", \"": "\", \"",
   "adding \", \"": "tbr",
   "full function": "\"tbr\"",
   "alias for code": "\"tbr\"",
   "Text": "You can find Twitch's recommended bitrates for different resolutions here: https://stream.twitch.tv/encoding/\nKeep in mind that you shouldn't go above 6000 Kbps, and if you're not partnered don't set your bitrate too high otherwise your viewers may have trouble watching your stream.",
   "code": "#213\n@client.command(aliases=(\"tbr\")) \nasync def twitchbitrate(ctx):\n  field3 = content_fields[213][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#214",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 214,
   "Command": "twitchcookie",
   "Aliases": "twitchcookies",
   "\", \"": "\", \"",
   "adding \", \"": "twitchcookies",
   "full function": "\"twitchcookies\"",
   "alias for code": "\"twitchcookies\"",
   "Text": "To fix the Twitch cookie message in OBS panels, go to Settings > Stream and logout of your Twitch account, then login again.",
   "code": "#214\n@client.command(aliases=(\"twitchcookies\")) \nasync def twitchcookie(ctx):\n  field3 = content_fields[214][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#215",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 215,
   "Command": "twitchsoundtrack",
   "Aliases": "soundtrack",
   "\", \"": "\", \"",
   "adding \", \"": "soundtrack",
   "full function": "\"soundtrack\"",
   "alias for code": "\"soundtrack\"",
   "Text": "To correctly configure Soundtrack by Twitch, please follow [their guide](https://help.twitch.tv/s/article/soundtrack-audio-configuration).",
   "code": "#215\n@client.command(aliases=(\"soundtrack\")) \nasync def twitchsoundtrack(ctx):\n  field3 = content_fields[215][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#216",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 216,
   "Command": "twitchtest",
   "Aliases": "jtvping",
   "\", \"": "\", \"",
   "adding \", \"": "jtvping",
   "full function": "\"jtvping\"",
   "alias for code": "\"jtvping\"",
   "Text": "Use the Twitch Bandwidth Test to find the best Twitch server to stream to. Set Duration to Medium. You can uncheck any regions you're not near. After the test completes, click the Share Result button to upload a screenshot, which can then be copied and pasted here. Get TwitchTest from https://r1ch.net/projects/twitchtest",
   "code": "#216\n@client.command(aliases=(\"jtvping\")) \nasync def twitchtest(ctx):\n  field3 = content_fields[216][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#217",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 217,
   "Command": "twofactor",
   "Aliases": "2fa",
   "\", \"": "\", \"",
   "adding \", \"": "2fa",
   "full function": "\"2fa\"",
   "alias for code": "\"2fa\"",
   "Text": "If you are having issues streaming to Twitch recently, please make sure two-factor authentication is set up in your Twitch security settings as this is now required to stream.",
   "code": "#217\n@client.command(aliases=(\"2fa\")) \nasync def twofactor(ctx):\n  field3 = content_fields[217][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#218",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 218,
   "Command": "update",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Having issues updating OBS? Make sure OBS and any applications/games that were being captured are closed before trying to run the update. Still getting an error? Reboot your PC and run the installer again. Be sure not to open OBS until after the install finishes.",
   "code": "#218\n@client.command(aliases=()) \nasync def update(ctx):\n  field3 = content_fields[218][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#219",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 219,
   "Command": "usb",
   "Aliases": "usbview",
   "\", \"": "\", \"",
   "adding \", \"": "usbview",
   "full function": "\"usbview\"",
   "alias for code": "\"usbview\"",
   "Text": "USB problems? Use the USBView program to identify which hubs your devices are connected to. Move bandwidth-hungry devices like webcams and capture cards to separate hubs by switching their USB ports.",
   "code": "#219\n@client.command(aliases=(\"usbview\")) \nasync def usb(ctx):\n  field3 = content_fields[219][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#220",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 220,
   "Command": "uvc",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Here’s how to install native UVC drivers for your webcam:\nOpen Device Manager.\nExpand Imaging devices.\nLocate the name of your camera in the list and right-click on it.\nSelect Update Driver Software…\nClick Browse my computer for driver software.\nClick Let me pick from a list of device drivers on my computer.\nCheck Show compatible hardware, and then select USB Video Device.\nClick Next and follow the on-screen instructions to update the driver.",
   "code": "#220\n@client.command(aliases=()) \nasync def uvc(ctx):\n  field3 = content_fields[220][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#221",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 221,
   "Command": "uwp",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "As of 25.0.8, manual action is no longer required to capture UWP games. If you're still having trouble, try running OBS as Administrator, or check our list of conflicting apps.",
   "code": "#221\n@client.command(aliases=()) \nasync def uwp(ctx):\n  field3 = content_fields[221][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#222",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 222,
   "Command": "vac",
   "Aliases": "voicemeeter",
   "\", \"": "\", \"",
   "adding \", \"": "voicemeeter",
   "full function": "\"voicemeeter\"",
   "alias for code": "\"voicemeeter\"",
   "Text": "How to exclude or separate audio sources for a stream or recording: https://obsproject.com/forum/resources/8/\nFor a more advanced setup, check out our guide on [Voicemeeter Banana](https://canary.discord.com/channels/473253164884295699/599861521543200789/801271416817319966)",
   "code": "#222\n@client.command(aliases=(\"voicemeeter\")) \nasync def vac(ctx):\n  field3 = content_fields[222][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#223",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 223,
   "Command": "vcamaudio",
   "Aliases": "vbcable, cable",
   "\", \"": "\", \"",
   "adding \", \"": "vbcable\", \"cable",
   "full function": "\"vbcable\", \"cable\"",
   "alias for code": "\"vbcable\", \"cable\"",
   "Text": "Install [VB-Audio CABLE](https://www.vb-audio.com/Cable/index.htm). (A reboot is not required)\nIn OBS Studio, go to Settings > Audio and select \"CABLE Input\" as your Monitoring Device\nGo to Edit > Advanced Audio Properties and enable Audio Monitoring for the audio sources you'd like to stream to Discord.\nIn Discord, in Voice & Video settings, select \"CABLE Output\" instead of your microphone under \"Input device\".\nNow anything you monitor in OBS Studio will be streamed to Discord. Similar steps will work with other conferencing apps, such as Microsoft Teams or Slack.",
   "code": "#223\n@client.command(aliases=(\"vbcable\", \"cable\")) \nasync def vcamaudio(ctx):\n  field3 = content_fields[223][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#224",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 224,
   "Command": "vcamrename",
   "Aliases": "vcamname",
   "\", \"": "\", \"",
   "adding \", \"": "vcamname",
   "full function": "\"vcamname\"",
   "alias for code": "\"vcamname\"",
   "Text": "The virtual camera device from OBS cannot be renamed. Even if it was to be renamed, it wouldn't allow applications to use it any differently. If an application is blocking the virtual camera, it would still be blocked.",
   "code": "#224\n@client.command(aliases=(\"vcamname\")) \nasync def vcamrename(ctx):\n  field3 = content_fields[224][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#225",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 225,
   "Command": "vce",
   "Aliases": "amf, amd",
   "\", \"": "\", \"",
   "adding \", \"": "amf\", \"amd",
   "full function": "\"amf\", \"amd\"",
   "alias for code": "\"amf\", \"amd\"",
   "Text": "The AMD Advanced Media Framework (VCE) encoder plugin is available in OBS Studio as part of the base installation on Windows. If you are having issues using this encoder, first make sure that your drivers are [fully up to date.](https://support.amd.com/en-us/download)\nIf updating both drivers and plugin does not work, check the [troubleshooting guide.](https://github.com/obsproject/obs-amd-encoder/wiki/Guide%3A-Troubleshooting)",
   "code": "#225\n@client.command(aliases=(\"amf\", \"amd\")) \nasync def vce(ctx):\n  field3 = content_fields[225][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "#225\n@client.command(aliases=(\"amf\", \"amd\")) \nasync def vce(ctx):\n  field3 = content_fields[225][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#226\n@client.command(aliases=(\"macvirtualcam\", \"macdiscord\", \"macvcam\", \"vcam\")) \nasync def virtualcam(ctx):\n  field3 = content_fields[226][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#227\n@client.command(aliases=(\"vcamremove\", \"vcremove\")) \nasync def virtualcamremove(ctx):\n  field3 = content_fields[227][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#228\n@client.command(aliases=()) \nasync def virus(ctx):\n  field3 = content_fields[228][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#229\n@client.command(aliases=()) \nasync def vlc(ctx):\n  field3 = content_fields[229][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#230\n@client.command(aliases=()) \nasync def vlcsource(ctx):\n  field3 = content_fields[230][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#231\n@client.command(aliases=()) \nasync def voice(ctx):\n  field3 = content_fields[231][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#232\n@client.command(aliases=(\"volunteer\")) \nasync def volunteers(ctx):\n  field3 = content_fields[232][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#233\n@client.command(aliases=(\"redist\", \"vcredist\", \"vs2015\", \"vs2019\", \"prereq\")) \nasync def vs2017(ctx):\n  field3 = content_fields[233][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#234\n@client.command(aliases=()) \nasync def vst(ctx):\n  field3 = content_fields[234][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#235\n@client.command(aliases=()) \nasync def vulkan(ctx):\n  field3 = content_fields[235][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#236\n@client.command(aliases=(\"websockets\")) \nasync def websocket(ctx):\n  field3 = content_fields[236][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#237\n@client.command(aliases=()) \nasync def wiki(ctx):\n  field3 = content_fields[237][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#238\n@client.command(aliases=(\"win10privacy\")) \nasync def win10cam(ctx):\n  field3 = content_fields[238][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#239\n@client.command(aliases=(\"win7\", \"win8\", \"winupdate\")) \nasync def windowsupdate(ctx):\n  field3 = content_fields[239][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#240\n@client.command(aliases=()) \nasync def winsock(ctx):\n  field3 = content_fields[240][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#241\n@client.command(aliases=()) \nasync def workflow(ctx):\n  field3 = content_fields[241][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#242\n@client.command(aliases=()) \nasync def x264(ctx):\n  field3 = content_fields[242][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#243\n@client.command(aliases=()) \nasync def x264presets(ctx):\n  field3 = content_fields[243][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#244\n@client.command(aliases=()) \nasync def xonar(ctx):\n  field3 = content_fields[244][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#245\n@client.command(aliases=()) \nasync def xsplitvcam(ctx):\n  field3 = content_fields[245][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#246\n@client.command(aliases=(\"yellow\")) \nasync def yellowborder(ctx):\n  field3 = content_fields[246][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#247\n@client.command(aliases=()) \nasync def younow(ctx):\n  field3 = content_fields[247][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#248\n@client.command(aliases=()) \nasync def youtube(ctx):\n  field3 = content_fields[248][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#249\n@client.command(aliases=(\"ytbitrate\", \"ytbr\")) \nasync def youtubebitrate(ctx):\n  field3 = content_fields[249][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#250\n@client.command(aliases=()) \nasync def zerolatency(ctx):\n  field3 = content_fields[250][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#251\n@client.command(aliases=()) \nasync def pokemon(ctx):\n  field3 = content_fields[251][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#252\n@client.command(aliases=()) \nasync def rule6(ctx):\n  field3 = content_fields[252][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#253\n@client.command(aliases=()) \nasync def alphawidget(ctx):\n  field3 = content_fields[253][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#254\n@client.command(aliases=()) \nasync def c920(ctx):\n  field3 = content_fields[254][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#255\n@client.command(aliases=()) \nasync def cliffnotes(ctx):\n  field3 = content_fields[255][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#256\n@client.command(aliases=()) \nasync def collab(ctx):\n  field3 = content_fields[256][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "copied code": "#225\n@client.command(aliases=(\"amf\", \"amd\")) \nasync def vce(ctx):\n  field3 = content_fields[225][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#226\n@client.command(aliases=(\"macvirtualcam\", \"macdiscord\", \"macvcam\", \"vcam\")) \nasync def virtualcam(ctx):\n  field3 = content_fields[226][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#227\n@client.command(aliases=(\"vcamremove\", \"vcremove\")) \nasync def virtualcamremove(ctx):\n  field3 = content_fields[227][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#228\n@client.command(aliases=()) \nasync def virus(ctx):\n  field3 = content_fields[228][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#229\n@client.command(aliases=()) \nasync def vlc(ctx):\n  field3 = content_fields[229][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#230\n@client.command(aliases=()) \nasync def vlcsource(ctx):\n  field3 = content_fields[230][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#231\n@client.command(aliases=()) \nasync def voice(ctx):\n  field3 = content_fields[231][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#232\n@client.command(aliases=(\"volunteer\")) \nasync def volunteers(ctx):\n  field3 = content_fields[232][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#233\n@client.command(aliases=(\"redist\", \"vcredist\", \"vs2015\", \"vs2019\", \"prereq\")) \nasync def vs2017(ctx):\n  field3 = content_fields[233][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#234\n@client.command(aliases=()) \nasync def vst(ctx):\n  field3 = content_fields[234][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#235\n@client.command(aliases=()) \nasync def vulkan(ctx):\n  field3 = content_fields[235][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#236\n@client.command(aliases=(\"websockets\")) \nasync def websocket(ctx):\n  field3 = content_fields[236][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#237\n@client.command(aliases=()) \nasync def wiki(ctx):\n  field3 = content_fields[237][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#238\n@client.command(aliases=(\"win10privacy\")) \nasync def win10cam(ctx):\n  field3 = content_fields[238][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#239\n@client.command(aliases=(\"win7\", \"win8\", \"winupdate\")) \nasync def windowsupdate(ctx):\n  field3 = content_fields[239][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#240\n@client.command(aliases=()) \nasync def winsock(ctx):\n  field3 = content_fields[240][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#241\n@client.command(aliases=()) \nasync def workflow(ctx):\n  field3 = content_fields[241][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#242\n@client.command(aliases=()) \nasync def x264(ctx):\n  field3 = content_fields[242][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#243\n@client.command(aliases=()) \nasync def x264presets(ctx):\n  field3 = content_fields[243][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#244\n@client.command(aliases=()) \nasync def xonar(ctx):\n  field3 = content_fields[244][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#245\n@client.command(aliases=()) \nasync def xsplitvcam(ctx):\n  field3 = content_fields[245][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#246\n@client.command(aliases=(\"yellow\")) \nasync def yellowborder(ctx):\n  field3 = content_fields[246][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#247\n@client.command(aliases=()) \nasync def younow(ctx):\n  field3 = content_fields[247][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#248\n@client.command(aliases=()) \nasync def youtube(ctx):\n  field3 = content_fields[248][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#249\n@client.command(aliases=(\"ytbitrate\", \"ytbr\")) \nasync def youtubebitrate(ctx):\n  field3 = content_fields[249][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#250\n@client.command(aliases=()) \nasync def zerolatency(ctx):\n  field3 = content_fields[250][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#251\n@client.command(aliases=()) \nasync def pokemon(ctx):\n  field3 = content_fields[251][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#252\n@client.command(aliases=()) \nasync def rule6(ctx):\n  field3 = content_fields[252][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#253\n@client.command(aliases=()) \nasync def alphawidget(ctx):\n  field3 = content_fields[253][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#254\n@client.command(aliases=()) \nasync def c920(ctx):\n  field3 = content_fields[254][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#255\n@client.command(aliases=()) \nasync def cliffnotes(ctx):\n  field3 = content_fields[255][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#256\n@client.command(aliases=()) \nasync def collab(ctx):\n  field3 = content_fields[256][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "FIELD17": ""
 },
 {
   "#": "#226",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 226,
   "Command": "virtualcam",
   "Aliases": "macvirtualcam, macdiscord, macvcam, vcam",
   "\", \"": "\", \"",
   "adding \", \"": "macvirtualcam\", \"macdiscord\", \"macvcam\", \"vcam",
   "full function": "\"macvirtualcam\", \"macdiscord\", \"macvcam\", \"vcam\"",
   "alias for code": "\"macvirtualcam\", \"macdiscord\", \"macvcam\", \"vcam\"",
   "Text": "Windows: OBS v26 and above contains a basic virtual camera. For advanced usage, such as preview or specific scene/source output, try the [third party plugin](https://obsproject.com/forum/resources/obs-virtualcam.949/).\nmacOS: OBS v26.1 and above contains a standard virtual camera. Having issues with specific programs? Check [this guide](https://obsproject.com/wiki/MacOS-Virtual-Camera-Compatibility-Guide).\nLinux: OBS v26.1 and above contains a standard virtual camera. v4l2loopback is required, best installed via the v4l2loopback-dkms package.",
   "code": "#226\n@client.command(aliases=(\"macvirtualcam\", \"macdiscord\", \"macvcam\", \"vcam\")) \nasync def virtualcam(ctx):\n  field3 = content_fields[226][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#227",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 227,
   "Command": "virtualcamremove",
   "Aliases": "vcamremove, vcremove",
   "\", \"": "\", \"",
   "adding \", \"": "vcamremove\", \"vcremove",
   "full function": "\"vcamremove\", \"vcremove\"",
   "alias for code": "\"vcamremove\", \"vcremove\"",
   "Text": "To uninstall VirtualCam on Windows:\n1) Navigate to: C:\\Program Files\\obs-studio\\data\\obs-plugins\\win-dshow\n2) Right click virtualcam-uninstall.bat, and Run as Administrator.\nIf you have OBS installed in a different directory (or in portable mode), right click your OBS shortcut and choose \"Open file location\" to track down the location of the obs-studio directory.",
   "code": "#227\n@client.command(aliases=(\"vcamremove\", \"vcremove\")) \nasync def virtualcamremove(ctx):\n  field3 = content_fields[227][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#228",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 228,
   "Command": "virus",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "OBS Studio is guaranteed to be completely virus and malware free, as long as you download it from the official website at https://obsproject.com/download",
   "code": "#228\n@client.command(aliases=()) \nasync def virus(ctx):\n  field3 = content_fields[228][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#229",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 229,
   "Command": "vlc",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Many default video players do not have good format support. When playing files made with OBS, players like 'Movies & TV' can appear to be missing video or audio. [Download and use VLC](https://www.videolan.org/vlc/index.html) instead for accurate video playback.\nLike OBS, VLC is a free and open source project.",
   "code": "#229\n@client.command(aliases=()) \nasync def vlc(ctx):\n  field3 = content_fields[229][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#230",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 230,
   "Command": "vlcsource",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "VLC source requires VLC to be installed on your system, with the correct bitness. 32-bit VLC for 32-bit OBS, or 64-bit VLC for 64-bit OBS.\nVLC can be downloaded here: http://www.videolan.org/vlc/",
   "code": "#230\n@client.command(aliases=()) \nasync def vlcsource(ctx):\n  field3 = content_fields[230][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#231",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 231,
   "Command": "voice",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "A basic guide to improve your microphone quality can be found here: https://obsproject.com/forum/resources/514/",
   "code": "#231\n@client.command(aliases=()) \nasync def voice(ctx):\n  field3 = content_fields[231][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#232",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 232,
   "Command": "volunteers",
   "Aliases": "volunteer",
   "\", \"": "\", \"",
   "adding \", \"": "volunteer",
   "full function": "\"volunteer\"",
   "alias for code": "\"volunteer\"",
   "Text": "OBS is a completely free, open source application made by volunteers, and support is also provided for free by community volunteers in their spare time.",
   "code": "#232\n@client.command(aliases=(\"volunteer\")) \nasync def volunteers(ctx):\n  field3 = content_fields[232][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#233",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 233,
   "Command": "vs2017",
   "Aliases": "redist, vcredist, vs2015, vs2019, prereq",
   "\", \"": "\", \"",
   "adding \", \"": "redist\", \"vcredist\", \"vs2015\", \"vs2019\", \"prereq",
   "full function": "\"redist\", \"vcredist\", \"vs2015\", \"vs2019\", \"prereq\"",
   "alias for code": "\"redist\", \"vcredist\", \"vs2015\", \"vs2019\", \"prereq\"",
   "Text": "Visual Studio 2019 runtimes are required by the plugins that come with OBS Studio.\nDownload and install both vc2019redist_x86.exe and vc2019redist_x64.exe from https://obsproject.com/visual-studio-2019-runtimes",
   "code": "#233\n@client.command(aliases=(\"redist\", \"vcredist\", \"vs2015\", \"vs2019\", \"prereq\")) \nasync def vs2017(ctx):\n  field3 = content_fields[233][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#234",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 234,
   "Command": "vst",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "OBS Studio supports most VST2 plugins. More information can be found here, including restrictions and plugin install paths: https://obsproject.com/wiki/Filters-Guide#vst-plugin",
   "code": "#234\n@client.command(aliases=()) \nasync def vst(ctx):\n  field3 = content_fields[234][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#235",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 235,
   "Command": "vulkan",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "As of OBS v25, Vulkan capture is natively supported on Windows.",
   "code": "#235\n@client.command(aliases=()) \nasync def vulkan(ctx):\n  field3 = content_fields[235][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#236",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 236,
   "Command": "websocket",
   "Aliases": "websockets",
   "\", \"": "\", \"",
   "adding \", \"": "websockets",
   "full function": "\"websockets\"",
   "alias for code": "\"websockets\"",
   "Text": "A plugin for controlling OBS via websockets is available here:\nOBS Websockets",
   "code": "#236\n@client.command(aliases=(\"websockets\")) \nasync def websocket(ctx):\n  field3 = content_fields[236][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#237",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 237,
   "Command": "wiki",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "To see all of our guides, or to generally get a better understanding of OBS, check out the wiki: https://obsproject.com/wiki/",
   "code": "#237\n@client.command(aliases=()) \nasync def wiki(ctx):\n  field3 = content_fields[237][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#238",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 238,
   "Command": "win10cam",
   "Aliases": "win10privacy",
   "\", \"": "\", \"",
   "adding \", \"": "win10privacy",
   "full function": "\"win10privacy\"",
   "alias for code": "\"win10privacy\"",
   "Text": "Windows 10's April 2018 Update adds new privacy settings for microphones and cameras, which can block them from use. The camera privacy settings also affect capture cards. These settings are opt-in. To allow apps like OBS to use your microphone or camera again, follow these steps.\n1) Open the Settings app.\n2) Go to Privacy -> Camera for capture cards and webcams, and turn \"Allow apps to access your camera\" on.\n3) Go to Privacy -> Microphones, and turn \"Allow apps to access your microphone\" on.",
   "code": "#238\n@client.command(aliases=(\"win10privacy\")) \nasync def win10cam(ctx):\n  field3 = content_fields[238][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#239",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 239,
   "Command": "windowsupdate",
   "Aliases": "win7, win8, winupdate",
   "\", \"": "\", \"",
   "adding \", \"": "win7\", \"win8\", \"winupdate",
   "full function": "\"win7\", \"win8\", \"winupdate\"",
   "alias for code": "\"win7\", \"win8\", \"winupdate\"",
   "Text": "If you've installed the Visual C++ Components that OBS Studio requires, but still aren't able to install OBS Studio, you may need to update your Windows installation. To do this, follow these steps.\n1) Open Windows Update. This can be found by searching for Windows Update in the Start Menu, or in the Control Panel.\n2) Install any available updates.\n3) Restart your PC to finish installing updates.\n4) Repeat steps 1-3 until there are absolutely 0 updates remaining.\nOnce Windows is fully up to date, try installing OBS again. If that doesn't work, install the UCRT manually: https://support.microsoft.com/en-us/help/3118401/update-for-universal-c-runtime-in-windows",
   "code": "#239\n@client.command(aliases=(\"win7\", \"win8\", \"winupdate\")) \nasync def windowsupdate(ctx):\n  field3 = content_fields[239][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#240",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 240,
   "Command": "winsock",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "https://docs.microsoft.com/en-us/windows/win32/winsock/windows-sockets-error-codes-2",
   "code": "#240\n@client.command(aliases=()) \nasync def winsock(ctx):\n  field3 = content_fields[240][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#241",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 241,
   "Command": "workflow",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "https://imgs.xkcd.com/comics/workflow.png",
   "code": "#241\n@client.command(aliases=()) \nasync def workflow(ctx):\n  field3 = content_fields[241][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#242",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 242,
   "Command": "x264",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "An introductory guide to streaming with the x264 encoder can be found on the OBS Development Blog here: https://obsproject.com/blog/streaming-with-x264",
   "code": "#242\n@client.command(aliases=()) \nasync def x264(ctx):\n  field3 = content_fields[242][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#243",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 243,
   "Command": "x264presets",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "When streaming, you can set the x264 preset to a slower sounding value for increased quality, at the cost of increased CPU usage. It is recommended to leave this value on veryfast, as there are significant diminishing returns to setting it lower. See here for a comparison: https://r-1.ch/x264_preset_comparison/",
   "code": "#243\n@client.command(aliases=()) \nasync def x264presets(ctx):\n  field3 = content_fields[243][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#244",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 244,
   "Command": "xonar",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "If you are using an Asus Xonar sound device, you will need to disable GX mode in its software and reboot your PC.",
   "code": "#244\n@client.command(aliases=()) \nasync def xonar(ctx):\n  field3 = content_fields[244][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#245",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 245,
   "Command": "xsplitvcam",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "The XSplit VCam allows you to remove or blur the background of your webcam without needing a greenscreen or other expensive hardware.\nYou can check it out here: [XSplit VCam](https://www.xsplit.com/partners/obs)\nAs part of the sponsorship to OBS, the team at XSplit is donating a portion of the proceeds from VCam back to OBS!",
   "code": "#245\n@client.command(aliases=()) \nasync def xsplitvcam(ctx):\n  field3 = content_fields[245][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#246",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 246,
   "Command": "yellowborder",
   "Aliases": "yellow",
   "\", \"": "\", \"",
   "adding \", \"": "yellow",
   "full function": "\"yellow\"",
   "alias for code": "\"yellow\"",
   "Text": "When using a Window Capture source with the Windows Graphics Capture (WGC) method, or a Display Capture source with the Windows 10 1903+ method, you will have a yellow border surrounding the portion of the screen being captured. Unfortunately, this border cannot currently be removed, as the Windows SDK does not allow it. You can try using another capture method in the source properties, but it's possible this will instead produce a black screen. Once Microsoft release an update to the Windows SDK that allow us to disable the yellow border, we will be sure to let you turn off the border.",
   "code": "#246\n@client.command(aliases=(\"yellow\")) \nasync def yellowborder(ctx):\n  field3 = content_fields[246][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#247",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 247,
   "Command": "younow",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "YouNow is not compatible with OBS Studio from obsproject.com.\nYou will have to use their fork for which we can't provide support.\nPlease see https://younow.zendesk.com/hc/articles/206439166",
   "code": "#247\n@client.command(aliases=()) \nasync def younow(ctx):\n  field3 = content_fields[247][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#248",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 248,
   "Command": "youtube",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "How to stream to YouTube: https://obsproject.com/forum/resources/streaming-to-youtube-with-obs-studio.232/",
   "code": "#248\n@client.command(aliases=()) \nasync def youtube(ctx):\n  field3 = content_fields[248][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#249",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 249,
   "Command": "youtubebitrate",
   "Aliases": "ytbitrate, ytbr",
   "\", \"": "\", \"",
   "adding \", \"": "ytbitrate\", \"ytbr",
   "full function": "\"ytbitrate\", \"ytbr\"",
   "alias for code": "\"ytbitrate\", \"ytbr\"",
   "Text": "You can find YouTube's recommended bitrates for different resolutions here: https://support.google.com/youtube/answer/2853702?hl=en\nKeep in mind that unlike Twitch, YouTube re-encodes your original stream resolution, so you may need a higher bitrate to match the quality you'd normally see. Aim for the higher values in the ranges suggested by YouTube.",
   "code": "#249\n@client.command(aliases=(\"ytbitrate\", \"ytbr\")) \nasync def youtubebitrate(ctx):\n  field3 = content_fields[249][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#250",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 250,
   "Command": "zerolatency",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "https://cdn.knightlab.com/libs/juxtapose/latest/embed/index.html?uid=a8cb00ac-55c9-11eb-83c8-ebb5d6f907df",
   "code": "#250\n@client.command(aliases=()) \nasync def zerolatency(ctx):\n  field3 = content_fields[250][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#251",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 251,
   "Command": "pokemon",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Hi! We're sorry to tell you that If you're looking for the Pokémon sound files, they've been removed to avoid potential copyright issues.",
   "code": "#251\n@client.command(aliases=()) \nasync def pokemon(ctx):\n  field3 = content_fields[251][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#252",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 252,
   "Command": "rule6",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "__**REMINDER:**__ This is not a marketplace server. We do not allow offering or soliciting of transactions (paid or otherwise) on this server. If two people come to an agreement via DMs to go around this rule, then please note that this is at your own risk. The server is _NOT_ liable for any issues you may face from these transactions.\n\nIf you need an artist, we recommend searching on a proper platform such as Fiverr or 99designs, or even Twitter. \n\n\nPS. Don't ask someone to make you something for free. If you want to learn how to make things yourself, the community is more than willing to help you if you need pointers or specific help with techniques.",
   "code": "#252\n@client.command(aliases=()) \nasync def rule6(ctx):\n  field3 = content_fields[252][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#253",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 253,
   "Command": "alphawidget",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Hi, you can access the Sub Train and Rotating Feed Widgets [here!](https://discord.com/channels/473253164884295699/473299541999878144/604726378025320523)",
   "code": "#253\n@client.command(aliases=()) \nasync def alphawidget(ctx):\n  field3 = content_fields[253][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#254",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 254,
   "Command": "c920",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "_C920/C922/C930e Best Practices_\n - Exposure should be set to between -7 and -5 \n- Low Light comp should be turned to off\n- Gain should be 0 \n- White balance should be where your skintones are normal \n- Add a touch of sharpening from default (between 128 and 140) \n- Add a touch of contrast from default (between 128 and 140)\n- Add a touch of sat from default (between 128 and 140)\n- Add some brightness if the darks are a bit too dark",
   "code": "#254\n@client.command(aliases=()) \nasync def c920(ctx):\n  field3 = content_fields[254][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#255",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 255,
   "Command": "cliffnotes",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "_CLIFF NOTES_\n- ISO as low as possible (iso should ideally be under 800, if that's too dark you need more light) \n- aperture (f) as wide open as possible (with kit lens) \n- shutter speed twice the fps \n- custom white balance \n- make sure your camera is in movie mode \n- don't leave anything on auto",
   "code": "#255\n@client.command(aliases=()) \nasync def cliffnotes(ctx):\n  field3 = content_fields[255][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#256",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 256,
   "Command": "collab",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Hi to find collab partners, or even just others to game with, head to #┃find-a-collab !\n\nIf you can't see it, that's because you don't have the Content Creator role yet. \nGo to #┃join-the-creators and follow the instructions  ;)",
   "code": "#256\n@client.command(aliases=()) \nasync def collab(ctx):\n  field3 = content_fields[256][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#257",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 257,
   "Command": "grow",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Hi, \n\nSince Twitch has horrible discoverability, you're going to find it very hard to grow from streaming alone. You need to be making content on other, more discoverable platforms and funnel those viewers to Twitch. \nPlatforms like YouTube (YT, FB, TikTok, etc) help grow your brand and create an interest in you and/or your content hanging out with you in a live stream. \n\nLive interaction is Twitch's strength, so you'd need to see the strengths and weaknesses of each platform, and use them accordingly. \n\n_Here are some Alpha Gaming Vids to watch if you haven't already:_\n- 25 Twitch Tips in 10 mins: https://www.youtube.com/watch?v=si7VS8dVSZA \n- Top 5 Streaming Mistakes: https://www.youtube.com/watch?v=8tjJpUkGGBw",
   "code": "#257\n@client.command(aliases=()) \nasync def grow(ctx):\n  field3 = content_fields[257][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "#257\n@client.command(aliases=()) \nasync def grow(ctx):\n  field3 = content_fields[257][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#258\n@client.command(aliases=()) \nasync def lights(ctx):\n  field3 = content_fields[258][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#259\n@client.command(aliases=()) \nasync def nvenc(ctx):\n  field3 = content_fields[259][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#260\n@client.command(aliases=()) \nasync def pixelchat(ctx):\n  field3 = content_fields[260][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#261\n@client.command(aliases=()) \nasync def goxlr(ctx):\n  field3 = content_fields[261][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#262\n@client.command(aliases=()) \nasync def sampai(ctx):\n  field3 = content_fields[262][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#263\n@client.command(aliases=()) \nasync def specs(ctx):\n  field3 = content_fields[263][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#264\n@client.command(aliases=()) \nasync def streambeats(ctx):\n  field3 = content_fields[264][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#265\n@client.command(aliases=()) \nasync def variables(ctx):\n  field3 = content_fields[265][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#266\n@client.command(aliases=()) \nasync def report(ctx):\n  field3 = content_fields[266][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "copied code": "#257\n@client.command(aliases=()) \nasync def grow(ctx):\n  field3 = content_fields[257][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#258\n@client.command(aliases=()) \nasync def lights(ctx):\n  field3 = content_fields[258][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#259\n@client.command(aliases=()) \nasync def nvenc(ctx):\n  field3 = content_fields[259][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#260\n@client.command(aliases=()) \nasync def pixelchat(ctx):\n  field3 = content_fields[260][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#261\n@client.command(aliases=()) \nasync def goxlr(ctx):\n  field3 = content_fields[261][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#262\n@client.command(aliases=()) \nasync def sampai(ctx):\n  field3 = content_fields[262][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#263\n@client.command(aliases=()) \nasync def specs(ctx):\n  field3 = content_fields[263][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#264\n@client.command(aliases=()) \nasync def streambeats(ctx):\n  field3 = content_fields[264][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#265\n@client.command(aliases=()) \nasync def variables(ctx):\n  field3 = content_fields[265][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n#266\n@client.command(aliases=()) \nasync def report(ctx):\n  field3 = content_fields[266][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "FIELD17": ""
 },
 {
   "#": "#258",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 258,
   "Command": "lights",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Hi! You can check out our recommended lights [here](https://discord.com/channels/473253164884295699/599861471874383882/780085668202151976). This list may be updated sometimes, so check back if you need! ",
   "code": "#258\n@client.command(aliases=()) \nasync def lights(ctx):\n  field3 = content_fields[258][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#259",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 259,
   "Command": "nvenc",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Hi! You can find the basic NVENC settings for OBS Recording and Twitch Streaming [here](https://discord.com/channels/473253164884295699/764008007658897439/806313313146372117)",
   "code": "#259\n@client.command(aliases=()) \nasync def nvenc(ctx):\n  field3 = content_fields[259][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#260",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 260,
   "Command": "pixelchat",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "For detailed instructions on how to set up the Now Playing Widget on Pixelchat, [click here](https://discord.com/channels/473253164884295699/764008007658897439/780348277853650957)",
   "code": "#260\n@client.command(aliases=()) \nasync def pixelchat(ctx):\n  field3 = content_fields[260][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#261",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 261,
   "Command": "goxlr",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Hi! For a link to a quick FAQ of GoXLR stuffs [click here](https://discord.com/channels/473253164884295699/599861521543200789/831288085798453258)",
   "code": "#261\n@client.command(aliases=()) \nasync def goxlr(ctx):\n  field3 = content_fields[261][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#262",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 262,
   "Command": "sampai",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Hi, you can [click here](https://discord.com/channels/473253164884295699/595049244801630248/716746628232380588) to find the invite to Sam's server!\n",
   "code": "#262\n@client.command(aliases=()) \nasync def sampai(ctx):\n  field3 = content_fields[262][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#263",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 263,
   "Command": "specs",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "[Click Here](https://discord.com/channels/473253164884295699/473309543858962433/827291094625943622) and follow this guide to find out what CPU and GPU you have!",
   "code": "#263\n@client.command(aliases=()) \nasync def specs(ctx):\n  field3 = content_fields[263][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#264",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 264,
   "Command": "streambeats",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "Hi, for all things Streambeats, including the link to the Streambeats server, [Click Here](https://discord.com/channels/473253164884295699/703808841829318657/789675905647378442)",
   "code": "#264\n@client.command(aliases=()) \nasync def streambeats(ctx):\n  field3 = content_fields[264][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#265",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 265,
   "Command": "variables",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "[Click Here](https://discord.com/channels/473253164884295699/473309543858962433/726223921489248276) for a list of all the Variables for the Alpha Rotating Feed",
   "code": "#265\n@client.command(aliases=()) \nasync def variables(ctx):\n  field3 = content_fields[265][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "#266",
   "first": "\n@client.command(aliases=(",
   "second": ")) \nasync def ",
   "third": "(ctx):\n  field3 = content_fields[",
   "fourth": "][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "number": 266,
   "Command": "report",
   "Aliases": "",
   "\", \"": "\", \"",
   "adding \", \"": "",
   "full function": "\"\"",
   "alias for code": "",
   "Text": "**How to Make a Server Report**\nReports should be made in #┃reports-server-issues To make a server report you will need: \n- A screenshot of the problem interaction \n- The user's ID (not their tag)* \n\n* If you're not sure how to get the user ID, here's a quick guide: https://support.discord.com/hc/en-us/articles/206346498-Where-can-I-find-my-User-Server-Message-I     \n\nThank you for helping to improve our server!",
   "code": "#266\n@client.command(aliases=()) \nasync def report(ctx):\n  field3 = content_fields[266][\"Text\"] \n  embed=discord.Embed(title=\"\", description=field3, color=0x00ff00)\n  await ctx.send(embed=embed)\n\n",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 },
 {
   "#": "",
   "first": "",
   "second": "",
   "third": "",
   "fourth": "",
   "number": null,
   "Command": "",
   "Aliases": "",
   "\", \"": "",
   "adding \", \"": "",
   "full function": "",
   "alias for code": "",
   "Text": "",
   "code": "",
   "combined code": "",
   "copied code": "",
   "FIELD17": ""
 }
]